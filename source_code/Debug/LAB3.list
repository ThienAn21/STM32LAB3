
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003078  08003078  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003078  08003078  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000068  080030e8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080030e8  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009932  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6f  00000000  00000000  000299c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f00  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c365  00000000  00000000  00043a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082729  00000000  00000000  0004fdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d24d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af4  00000000  00000000  000d252c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800303c 	.word	0x0800303c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800303c 	.word	0x0800303c

0800014c <reset_all_button>:
int keyReg2[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int time_for_key_press[num_buttons] = {2000, 2000, 2000};

void reset_all_button(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i< num_buttons; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e00c      	b.n	8000172 <reset_all_button+0x26>
		button_flag_pressed_once[i] = 0;
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <reset_all_button+0x38>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag_pressed_hold[i] = 0;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <reset_all_button+0x3c>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i< num_buttons; i++){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3301      	adds	r3, #1
 8000170:	607b      	str	r3, [r7, #4]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	ddef      	ble.n	8000158 <reset_all_button+0xc>
	}
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000084 	.word	0x20000084
 8000188:	20000090 	.word	0x20000090

0800018c <key_n_process_pressed_once>:

void key_n_process_pressed_once(int n){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	button_flag_pressed_once[n] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <key_n_process_pressed_once+0x1c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000084 	.word	0x20000084

080001ac <key_n_process_pressed_hold>:
void key_n_process_pressed_hold(int n){
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	button_flag_pressed_hold[n] = 1;
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <key_n_process_pressed_hold+0x1c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2101      	movs	r1, #1
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000090 	.word	0x20000090

080001cc <is_button_pressed_once>:

int is_button_pressed_once(int n){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_once[n] == 1){
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <is_button_pressed_once+0x30>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d106      	bne.n	80001ee <is_button_pressed_once+0x22>
		button_flag_pressed_once[n] = 0;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <is_button_pressed_once+0x30>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2100      	movs	r1, #0
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e000      	b.n	80001f0 <is_button_pressed_once+0x24>
	}
	else {
		return 0;
 80001ee:	2300      	movs	r3, #0
	}
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000084 	.word	0x20000084

08000200 <is_button_pressed_hold>:
int is_button_pressed_hold(int n){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_hold[n] == 1){
 8000208:	4a09      	ldr	r2, [pc, #36]	; (8000230 <is_button_pressed_hold+0x30>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d106      	bne.n	8000222 <is_button_pressed_hold+0x22>
		button_flag_pressed_hold[n] = 0;
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <is_button_pressed_hold+0x30>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2100      	movs	r1, #0
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800021e:	2301      	movs	r3, #1
 8000220:	e000      	b.n	8000224 <is_button_pressed_hold+0x24>
	}
	else {
		return 0;
 8000222:	2300      	movs	r3, #0
	}
}
 8000224:	4618      	mov	r0, r3
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000090 	.word	0x20000090

08000234 <get_key_input>:



void get_key_input(int n){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	keyReg0[n] = keyReg1[n];
 800023c:	4a56      	ldr	r2, [pc, #344]	; (8000398 <get_key_input+0x164>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4955      	ldr	r1, [pc, #340]	; (800039c <get_key_input+0x168>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[n] = keyReg2[n];
 800024c:	4a54      	ldr	r2, [pc, #336]	; (80003a0 <get_key_input+0x16c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4950      	ldr	r1, [pc, #320]	; (8000398 <get_key_input+0x164>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// set up button n here
	switch(n){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d01d      	beq.n	800029e <get_key_input+0x6a>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b02      	cmp	r3, #2
 8000266:	dc24      	bgt.n	80002b2 <get_key_input+0x7e>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d003      	beq.n	8000276 <get_key_input+0x42>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d00a      	beq.n	800028a <get_key_input+0x56>
		break;
	case 2:
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
		break;
	default:
		break;
 8000274:	e01d      	b.n	80002b2 <get_key_input+0x7e>
		 keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	484a      	ldr	r0, [pc, #296]	; (80003a4 <get_key_input+0x170>)
 800027c:	f001 fea6 	bl	8001fcc <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	461a      	mov	r2, r3
 8000284:	4b46      	ldr	r3, [pc, #280]	; (80003a0 <get_key_input+0x16c>)
 8000286:	601a      	str	r2, [r3, #0]
		break;
 8000288:	e014      	b.n	80002b4 <get_key_input+0x80>
		 keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_TIME_GPIO_Port, BUTTON_TIME_Pin);
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	4845      	ldr	r0, [pc, #276]	; (80003a4 <get_key_input+0x170>)
 8000290:	f001 fe9c 	bl	8001fcc <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b41      	ldr	r3, [pc, #260]	; (80003a0 <get_key_input+0x16c>)
 800029a:	605a      	str	r2, [r3, #4]
		break;
 800029c:	e00a      	b.n	80002b4 <get_key_input+0x80>
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800029e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a2:	4840      	ldr	r0, [pc, #256]	; (80003a4 <get_key_input+0x170>)
 80002a4:	f001 fe92 	bl	8001fcc <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b3c      	ldr	r3, [pc, #240]	; (80003a0 <get_key_input+0x16c>)
 80002ae:	609a      	str	r2, [r3, #8]
		break;
 80002b0:	e000      	b.n	80002b4 <get_key_input+0x80>
		break;
 80002b2:	bf00      	nop
	}
	/////////
	if((keyReg0[n] == keyReg1[n]) && (keyReg1[n] == keyReg2[n]) ){
 80002b4:	4a39      	ldr	r2, [pc, #228]	; (800039c <get_key_input+0x168>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002bc:	4936      	ldr	r1, [pc, #216]	; (8000398 <get_key_input+0x164>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d162      	bne.n	800038e <get_key_input+0x15a>
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <get_key_input+0x164>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d0:	4933      	ldr	r1, [pc, #204]	; (80003a0 <get_key_input+0x16c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d158      	bne.n	800038e <get_key_input+0x15a>
		if(keyReg2[n] != keyReg3[n]){
 80002dc:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <get_key_input+0x16c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e4:	4930      	ldr	r1, [pc, #192]	; (80003a8 <get_key_input+0x174>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d02c      	beq.n	800034a <get_key_input+0x116>
			keyReg3[n] = keyReg2[n];
 80002f0:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <get_key_input+0x16c>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f8:	492b      	ldr	r1, [pc, #172]	; (80003a8 <get_key_input+0x174>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[n] == NORMAL_STATE && en_pressed_once[n] == 1){
 8000300:	4a27      	ldr	r2, [pc, #156]	; (80003a0 <get_key_input+0x16c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d10d      	bne.n	8000328 <get_key_input+0xf4>
 800030c:	4a27      	ldr	r2, [pc, #156]	; (80003ac <get_key_input+0x178>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d107      	bne.n	8000328 <get_key_input+0xf4>
				//TODO when pressed once
				en_pressed_once[n] = 0;
 8000318:	4a24      	ldr	r2, [pc, #144]	; (80003ac <get_key_input+0x178>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2100      	movs	r1, #0
 800031e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				key_n_process_pressed_once(n);
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f7ff ff32 	bl	800018c <key_n_process_pressed_once>
			}
			if(keyReg2[n] == PRESSED_STATE){
 8000328:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <get_key_input+0x16c>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <get_key_input+0x10a>
				en_pressed_once[n] = 1;
 8000334:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <get_key_input+0x178>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2101      	movs	r1, #1
 800033a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			time_for_key_press[n] = 200;
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <get_key_input+0x17c>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	21c8      	movs	r1, #200	; 0xc8
 8000344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				time_for_key_press[n] = 200;
			}
		}
	}
}
 8000348:	e021      	b.n	800038e <get_key_input+0x15a>
			time_for_key_press[n]--;
 800034a:	4a19      	ldr	r2, [pc, #100]	; (80003b0 <get_key_input+0x17c>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4916      	ldr	r1, [pc, #88]	; (80003b0 <get_key_input+0x17c>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(time_for_key_press[n] == 0){
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <get_key_input+0x17c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d112      	bne.n	800038e <get_key_input+0x15a>
				if(keyReg2[n] == PRESSED_STATE){
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <get_key_input+0x16c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d107      	bne.n	8000384 <get_key_input+0x150>
					en_pressed_once[n] = 0;
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <get_key_input+0x178>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2100      	movs	r1, #0
 800037a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					key_n_process_pressed_hold(n);
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff14 	bl	80001ac <key_n_process_pressed_hold>
				time_for_key_press[n] = 200;
 8000384:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <get_key_input+0x17c>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	21c8      	movs	r1, #200	; 0xc8
 800038a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000000c 	.word	0x2000000c
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000018 	.word	0x20000018
 80003a4:	40010800 	.word	0x40010800
 80003a8:	20000024 	.word	0x20000024
 80003ac:	2000009c 	.word	0x2000009c
 80003b0:	20000030 	.word	0x20000030

080003b4 <get_key_input_all>:

void get_key_input_all(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0


	for(int i = 0; i < num_buttons ;i++){
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	e005      	b.n	80003cc <get_key_input_all+0x18>
		get_key_input(i);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff37 	bl	8000234 <get_key_input>
	for(int i = 0; i < num_buttons ;i++){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3301      	adds	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	ddf6      	ble.n	80003c0 <get_key_input_all+0xc>
	}
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <set_normal_mode>:
int time_red_old = 0;
int time_yellow_old = 0;
int time_green_old = 0;
int error_flag = 0;

void set_normal_mode(){
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	state_lightTraffic = RED1_GREEN2;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <set_normal_mode+0x24>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
	time_road1 = time_red1;
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <set_normal_mode+0x28>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a07      	ldr	r2, [pc, #28]	; (8000408 <set_normal_mode+0x2c>)
 80003ec:	6013      	str	r3, [r2, #0]
	time_road2 = time_green2;
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <set_normal_mode+0x30>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <set_normal_mode+0x34>)
 80003f4:	6013      	str	r3, [r2, #0]
	//red1_green2();
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	2000003c 	.word	0x2000003c
 8000404:	20000040 	.word	0x20000040
 8000408:	200000c4 	.word	0x200000c4
 800040c:	20000054 	.word	0x20000054
 8000410:	200000c8 	.word	0x200000c8

08000414 <set_red_mode>:
void set_red_mode(){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	reset_all_button();
 8000418:	f7ff fe98 	bl	800014c <reset_all_button>
	all_red_on();
 800041c:	f000 ff6a 	bl	80012f4 <all_red_on>
	temp_change_time = time_red1;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <set_red_mode+0x28>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a06      	ldr	r2, [pc, #24]	; (8000440 <set_red_mode+0x2c>)
 8000426:	6013      	str	r3, [r2, #0]
	time_road1 = time_red1;
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <set_red_mode+0x28>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <set_red_mode+0x30>)
 800042e:	6013      	str	r3, [r2, #0]
	time_road2 = temp_change_time;
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <set_red_mode+0x2c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <set_red_mode+0x34>)
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000040 	.word	0x20000040
 8000440:	200000a8 	.word	0x200000a8
 8000444:	200000c4 	.word	0x200000c4
 8000448:	200000c8 	.word	0x200000c8

0800044c <set_yellow_mode>:
void set_yellow_mode(){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	reset_all_button();
 8000450:	f7ff fe7c 	bl	800014c <reset_all_button>
	all_yellow_on();
 8000454:	f000 ff7a 	bl	800134c <all_yellow_on>
	temp_change_time = time_yellow1;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <set_yellow_mode+0x28>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <set_yellow_mode+0x2c>)
 800045e:	6013      	str	r3, [r2, #0]
	time_road1 = time_yellow1;
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <set_yellow_mode+0x28>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a05      	ldr	r2, [pc, #20]	; (800047c <set_yellow_mode+0x30>)
 8000466:	6013      	str	r3, [r2, #0]
	time_road2 = temp_change_time;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <set_yellow_mode+0x2c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <set_yellow_mode+0x34>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000044 	.word	0x20000044
 8000478:	200000a8 	.word	0x200000a8
 800047c:	200000c4 	.word	0x200000c4
 8000480:	200000c8 	.word	0x200000c8

08000484 <set_green_mode>:
void set_green_mode(){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	reset_all_button();
 8000488:	f7ff fe60 	bl	800014c <reset_all_button>
	all_green_on();
 800048c:	f000 ff8a 	bl	80013a4 <all_green_on>
	temp_change_time = time_green1;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <set_green_mode+0x28>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <set_green_mode+0x2c>)
 8000496:	6013      	str	r3, [r2, #0]
	time_road1 = time_green1;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <set_green_mode+0x28>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <set_green_mode+0x30>)
 800049e:	6013      	str	r3, [r2, #0]
	time_road2 = temp_change_time;
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <set_green_mode+0x2c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <set_green_mode+0x34>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000048 	.word	0x20000048
 80004b0:	200000a8 	.word	0x200000a8
 80004b4:	200000c4 	.word	0x200000c4
 80004b8:	200000c8 	.word	0x200000c8

080004bc <set_error_mode>:
void set_error_mode(){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	all_led_off();
 80004c0:	f001 f81a 	bl	80014f8 <all_led_off>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <increase_temp_time>:

void increase_temp_time(){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	temp_change_time++;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <increase_temp_time+0x2c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <increase_temp_time+0x2c>)
 80004d4:	6013      	str	r3, [r2, #0]
	if(temp_change_time >= 100){
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <increase_temp_time+0x2c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b63      	cmp	r3, #99	; 0x63
 80004dc:	dd02      	ble.n	80004e4 <increase_temp_time+0x1c>
		temp_change_time = 1;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <increase_temp_time+0x2c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
	}
	time_road2 = temp_change_time;
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <increase_temp_time+0x2c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <increase_temp_time+0x30>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	200000a8 	.word	0x200000a8
 80004f8:	200000c8 	.word	0x200000c8

080004fc <control_all>:

void control_all(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	switch(status){
 8000500:	4bb2      	ldr	r3, [pc, #712]	; (80007cc <control_all+0x2d0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b05      	cmp	r3, #5
 8000506:	f200 818e 	bhi.w	8000826 <control_all+0x32a>
 800050a:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <control_all+0x14>)
 800050c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000510:	08000529 	.word	0x08000529
 8000514:	08000543 	.word	0x08000543
 8000518:	080005b9 	.word	0x080005b9
 800051c:	0800063f 	.word	0x0800063f
 8000520:	080006c5 	.word	0x080006c5
 8000524:	08000747 	.word	0x08000747
	case INIT:
		status = NORMAL_MODE;
 8000528:	4ba8      	ldr	r3, [pc, #672]	; (80007cc <control_all+0x2d0>)
 800052a:	2201      	movs	r2, #1
 800052c:	601a      	str	r2, [r3, #0]
		setTimer1(1000);//1s
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f001 f91d 	bl	8001770 <setTimer1>
		setTimer2(250);
 8000536:	20fa      	movs	r0, #250	; 0xfa
 8000538:	f001 f934 	bl	80017a4 <setTimer2>
		set_normal_mode();
 800053c:	f7ff ff4e 	bl	80003dc <set_normal_mode>
		break;
 8000540:	e17c      	b.n	800083c <control_all+0x340>
	case NORMAL_MODE:
		if(timer1_flag == 1){
 8000542:	4ba3      	ldr	r3, [pc, #652]	; (80007d0 <control_all+0x2d4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d10d      	bne.n	8000566 <control_all+0x6a>
			setTimer1(1000); //1s
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f001 f90f 	bl	8001770 <setTimer1>
			time_road1--;
 8000552:	4ba0      	ldr	r3, [pc, #640]	; (80007d4 <control_all+0x2d8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a9e      	ldr	r2, [pc, #632]	; (80007d4 <control_all+0x2d8>)
 800055a:	6013      	str	r3, [r2, #0]
			time_road2--;
 800055c:	4b9e      	ldr	r3, [pc, #632]	; (80007d8 <control_all+0x2dc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	4a9d      	ldr	r2, [pc, #628]	; (80007d8 <control_all+0x2dc>)
 8000564:	6013      	str	r3, [r2, #0]
		}
		control_lightTraffic();
 8000566:	f000 f9ef 	bl	8000948 <control_lightTraffic>
		control_led7seg();
 800056a:	f000 f96b 	bl	8000844 <control_led7seg>
		// save old time
		time_red_old = time_red1;
 800056e:	4b9b      	ldr	r3, [pc, #620]	; (80007dc <control_all+0x2e0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a9b      	ldr	r2, [pc, #620]	; (80007e0 <control_all+0x2e4>)
 8000574:	6013      	str	r3, [r2, #0]
		time_yellow_old = time_yellow1;
 8000576:	4b9b      	ldr	r3, [pc, #620]	; (80007e4 <control_all+0x2e8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a9b      	ldr	r2, [pc, #620]	; (80007e8 <control_all+0x2ec>)
 800057c:	6013      	str	r3, [r2, #0]
		time_green_old = time_green1;
 800057e:	4b9b      	ldr	r3, [pc, #620]	; (80007ec <control_all+0x2f0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a9b      	ldr	r2, [pc, #620]	; (80007f0 <control_all+0x2f4>)
 8000584:	6013      	str	r3, [r2, #0]
		//change mode
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fe20 	bl	80001cc <is_button_pressed_once>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d106      	bne.n	80005a0 <control_all+0xa4>
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fe34 	bl	8000200 <is_button_pressed_hold>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	f000 8145 	beq.w	800082a <control_all+0x32e>
			status = SET_RED_MODE;
 80005a0:	4b8a      	ldr	r3, [pc, #552]	; (80007cc <control_all+0x2d0>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 80005a6:	20fa      	movs	r0, #250	; 0xfa
 80005a8:	f001 f8fc 	bl	80017a4 <setTimer2>
			setTimer3(250);//0.25s
 80005ac:	20fa      	movs	r0, #250	; 0xfa
 80005ae:	f001 f913 	bl	80017d8 <setTimer3>
			set_red_mode();
 80005b2:	f7ff ff2f 	bl	8000414 <set_red_mode>
		}
		break;
 80005b6:	e138      	b.n	800082a <control_all+0x32e>
	case SET_RED_MODE:
		control_led7seg();
 80005b8:	f000 f944 	bl	8000844 <control_led7seg>
		blink_red();
 80005bc:	f000 fa4c 	bl	8000a58 <blink_red>
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fe03 	bl	80001cc <is_button_pressed_once>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d105      	bne.n	80005d8 <control_all+0xdc>
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fe17 	bl	8000200 <is_button_pressed_hold>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00a      	beq.n	80005ee <control_all+0xf2>
			status = SET_YELLOW_MODE;
 80005d8:	4b7c      	ldr	r3, [pc, #496]	; (80007cc <control_all+0x2d0>)
 80005da:	2203      	movs	r2, #3
 80005dc:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 80005de:	20fa      	movs	r0, #250	; 0xfa
 80005e0:	f001 f8e0 	bl	80017a4 <setTimer2>
			setTimer3(250);//0.25s
 80005e4:	20fa      	movs	r0, #250	; 0xfa
 80005e6:	f001 f8f7 	bl	80017d8 <setTimer3>
			set_yellow_mode();
 80005ea:	f7ff ff2f 	bl	800044c <set_yellow_mode>
		}
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff fdec 	bl	80001cc <is_button_pressed_once>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <control_all+0x10a>
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff fe00 	bl	8000200 <is_button_pressed_hold>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <control_all+0x10e>
			increase_temp_time();
 8000606:	f7ff ff5f 	bl	80004c8 <increase_temp_time>
		}
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff fdde 	bl	80001cc <is_button_pressed_once>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <control_all+0x128>
 8000616:	2002      	movs	r0, #2
 8000618:	f7ff fdf2 	bl	8000200 <is_button_pressed_hold>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8105 	beq.w	800082e <control_all+0x332>
			time_red1 = temp_change_time;
 8000624:	4b73      	ldr	r3, [pc, #460]	; (80007f4 <control_all+0x2f8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a6c      	ldr	r2, [pc, #432]	; (80007dc <control_all+0x2e0>)
 800062a:	6013      	str	r3, [r2, #0]
			time_red2 = time_red1;
 800062c:	4b6b      	ldr	r3, [pc, #428]	; (80007dc <control_all+0x2e0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a71      	ldr	r2, [pc, #452]	; (80007f8 <control_all+0x2fc>)
 8000632:	6013      	str	r3, [r2, #0]
			time_road1 = time_red1;
 8000634:	4b69      	ldr	r3, [pc, #420]	; (80007dc <control_all+0x2e0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a66      	ldr	r2, [pc, #408]	; (80007d4 <control_all+0x2d8>)
 800063a:	6013      	str	r3, [r2, #0]
		}
		break;
 800063c:	e0f7      	b.n	800082e <control_all+0x332>
	case SET_YELLOW_MODE:
		control_led7seg();
 800063e:	f000 f901 	bl	8000844 <control_led7seg>
		blink_yellow();
 8000642:	f000 fa19 	bl	8000a78 <blink_yellow>
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fdc0 	bl	80001cc <is_button_pressed_once>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <control_all+0x162>
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff fdd4 	bl	8000200 <is_button_pressed_hold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00a      	beq.n	8000674 <control_all+0x178>
			status = SET_GREEN_MODE;
 800065e:	4b5b      	ldr	r3, [pc, #364]	; (80007cc <control_all+0x2d0>)
 8000660:	2204      	movs	r2, #4
 8000662:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 8000664:	20fa      	movs	r0, #250	; 0xfa
 8000666:	f001 f89d 	bl	80017a4 <setTimer2>
			setTimer3(250);//0.25s
 800066a:	20fa      	movs	r0, #250	; 0xfa
 800066c:	f001 f8b4 	bl	80017d8 <setTimer3>
			set_green_mode();
 8000670:	f7ff ff08 	bl	8000484 <set_green_mode>
		}
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff fda9 	bl	80001cc <is_button_pressed_once>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d105      	bne.n	800068c <control_all+0x190>
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff fdbd 	bl	8000200 <is_button_pressed_hold>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <control_all+0x194>
			increase_temp_time();
 800068c:	f7ff ff1c 	bl	80004c8 <increase_temp_time>
		}
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8000690:	2002      	movs	r0, #2
 8000692:	f7ff fd9b 	bl	80001cc <is_button_pressed_once>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d106      	bne.n	80006aa <control_all+0x1ae>
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff fdaf 	bl	8000200 <is_button_pressed_hold>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 80c4 	beq.w	8000832 <control_all+0x336>
			time_yellow1 = temp_change_time;
 80006aa:	4b52      	ldr	r3, [pc, #328]	; (80007f4 <control_all+0x2f8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a4d      	ldr	r2, [pc, #308]	; (80007e4 <control_all+0x2e8>)
 80006b0:	6013      	str	r3, [r2, #0]
			time_yellow2 = time_yellow1;
 80006b2:	4b4c      	ldr	r3, [pc, #304]	; (80007e4 <control_all+0x2e8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a51      	ldr	r2, [pc, #324]	; (80007fc <control_all+0x300>)
 80006b8:	6013      	str	r3, [r2, #0]
			time_road1 = time_yellow1;
 80006ba:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <control_all+0x2e8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a45      	ldr	r2, [pc, #276]	; (80007d4 <control_all+0x2d8>)
 80006c0:	6013      	str	r3, [r2, #0]
		}
		break;
 80006c2:	e0b6      	b.n	8000832 <control_all+0x336>
	case SET_GREEN_MODE:
		control_led7seg();
 80006c4:	f000 f8be 	bl	8000844 <control_led7seg>
		blink_green();
 80006c8:	f000 f9e6 	bl	8000a98 <blink_green>
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fd7d 	bl	80001cc <is_button_pressed_once>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d105      	bne.n	80006e4 <control_all+0x1e8>
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff fd91 	bl	8000200 <is_button_pressed_hold>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <control_all+0x1fa>
			status = ERROR_MODE;
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <control_all+0x2d0>)
 80006e6:	2205      	movs	r2, #5
 80006e8:	601a      	str	r2, [r3, #0]
			setTimer3(2000);
 80006ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ee:	f001 f873 	bl	80017d8 <setTimer3>
			set_error_mode();
 80006f2:	f7ff fee3 	bl	80004bc <set_error_mode>
		}
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff fd68 	bl	80001cc <is_button_pressed_once>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d105      	bne.n	800070e <control_all+0x212>
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fd7c 	bl	8000200 <is_button_pressed_hold>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <control_all+0x216>
			increase_temp_time();
 800070e:	f7ff fedb 	bl	80004c8 <increase_temp_time>
		}
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff fd5a 	bl	80001cc <is_button_pressed_once>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d106      	bne.n	800072c <control_all+0x230>
 800071e:	2002      	movs	r0, #2
 8000720:	f7ff fd6e 	bl	8000200 <is_button_pressed_hold>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	f000 8085 	beq.w	8000836 <control_all+0x33a>
			time_green1 = temp_change_time;
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <control_all+0x2f8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <control_all+0x2f0>)
 8000732:	6013      	str	r3, [r2, #0]
			time_green2 = time_green1;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <control_all+0x2f0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a31      	ldr	r2, [pc, #196]	; (8000800 <control_all+0x304>)
 800073a:	6013      	str	r3, [r2, #0]
			time_road1 = time_green1;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <control_all+0x2f0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <control_all+0x2d8>)
 8000742:	6013      	str	r3, [r2, #0]
		}
		break;
 8000744:	e077      	b.n	8000836 <control_all+0x33a>
	case ERROR_MODE:
		// if error, delete all current change then wait 2s before change to normal mode
		// if user press BUTTON_MODE, change to normal mode immediately
		//no error, change to normal mode immediately
		if(time_red1 != (time_yellow1 + time_green1)){
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <control_all+0x2e8>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <control_all+0x2f0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	441a      	add	r2, r3
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <control_all+0x2e0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d002      	beq.n	800075e <control_all+0x262>
			error_flag = 1;
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <control_all+0x308>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
		}
		if(error_flag == 1){
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <control_all+0x308>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d152      	bne.n	800080c <control_all+0x310>
			time_red1 = time_red_old;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <control_all+0x2e4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <control_all+0x2e0>)
 800076c:	6013      	str	r3, [r2, #0]
			time_yellow1 = time_yellow_old;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <control_all+0x2ec>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <control_all+0x2e8>)
 8000774:	6013      	str	r3, [r2, #0]
			time_green1 = time_green_old;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <control_all+0x2f4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <control_all+0x2f0>)
 800077c:	6013      	str	r3, [r2, #0]
			time_red2 = time_red1;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <control_all+0x2e0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1d      	ldr	r2, [pc, #116]	; (80007f8 <control_all+0x2fc>)
 8000784:	6013      	str	r3, [r2, #0]
			time_yellow2 = time_yellow1;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <control_all+0x2e8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <control_all+0x300>)
 800078c:	6013      	str	r3, [r2, #0]
			time_green2 = time_green1;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <control_all+0x2f0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <control_all+0x304>)
 8000794:	6013      	str	r3, [r2, #0]
			led7seg1_on();
 8000796:	f000 f8c5 	bl	8000924 <led7seg1_on>
			display7SEG_error();
 800079a:	f000 fcad 	bl	80010f8 <display7SEG_error>
			if(is_button_pressed_once(0) || is_button_pressed_hold(0) || timer3_flag == 1){
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fd14 	bl	80001cc <is_button_pressed_once>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d109      	bne.n	80007be <control_all+0x2c2>
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff fd28 	bl	8000200 <is_button_pressed_hold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <control_all+0x2c2>
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <control_all+0x30c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d13d      	bne.n	800083a <control_all+0x33e>
				error_flag = 0;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <control_all+0x308>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f001 f807 	bl	80017d8 <setTimer3>
			status = NORMAL_MODE;
			setTimer1(1000);
			setTimer2(250);
			set_normal_mode();
		}
		break;
 80007ca:	e036      	b.n	800083a <control_all+0x33e>
 80007cc:	200000c0 	.word	0x200000c0
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	200000c4 	.word	0x200000c4
 80007d8:	200000c8 	.word	0x200000c8
 80007dc:	20000040 	.word	0x20000040
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	20000044 	.word	0x20000044
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	20000048 	.word	0x20000048
 80007f0:	200000b4 	.word	0x200000b4
 80007f4:	200000a8 	.word	0x200000a8
 80007f8:	2000004c 	.word	0x2000004c
 80007fc:	20000050 	.word	0x20000050
 8000800:	20000054 	.word	0x20000054
 8000804:	200000b8 	.word	0x200000b8
 8000808:	200000e0 	.word	0x200000e0
			status = NORMAL_MODE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <control_all+0x344>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000816:	f000 ffab 	bl	8001770 <setTimer1>
			setTimer2(250);
 800081a:	20fa      	movs	r0, #250	; 0xfa
 800081c:	f000 ffc2 	bl	80017a4 <setTimer2>
			set_normal_mode();
 8000820:	f7ff fddc 	bl	80003dc <set_normal_mode>
		break;
 8000824:	e009      	b.n	800083a <control_all+0x33e>
	default:
		break;
 8000826:	bf00      	nop
 8000828:	e008      	b.n	800083c <control_all+0x340>
		break;
 800082a:	bf00      	nop
 800082c:	e006      	b.n	800083c <control_all+0x340>
		break;
 800082e:	bf00      	nop
 8000830:	e004      	b.n	800083c <control_all+0x340>
		break;
 8000832:	bf00      	nop
 8000834:	e002      	b.n	800083c <control_all+0x340>
		break;
 8000836:	bf00      	nop
 8000838:	e000      	b.n	800083c <control_all+0x340>
		break;
 800083a:	bf00      	nop
	}
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000c0 	.word	0x200000c0

08000844 <control_led7seg>:
 *      Author: ASUS TUF GAMING
 */
#include "control_led7seg.h"

int enable_seg = 0;
void control_led7seg(){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <control_led7seg+0xc8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d15b      	bne.n	8000908 <control_led7seg+0xc4>
		enable_seg = 1 - enable_seg;
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <control_led7seg+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f1c3 0301 	rsb	r3, r3, #1
 8000858:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <control_led7seg+0xcc>)
 800085a:	6013      	str	r3, [r2, #0]
		setTimer2(250);//0.25s
 800085c:	20fa      	movs	r0, #250	; 0xfa
 800085e:	f000 ffa1 	bl	80017a4 <setTimer2>
		if(enable_seg == 0){
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <control_led7seg+0xcc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d12c      	bne.n	80008c4 <control_led7seg+0x80>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4828      	ldr	r0, [pc, #160]	; (8000914 <control_led7seg+0xd0>)
 8000872:	f001 fbc2 	bl	8001ffa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <control_led7seg+0xd0>)
 800087e:	f001 fbbc 	bl	8001ffa <HAL_GPIO_WritePin>
			display7SEG1(time_road1 % 10);
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <control_led7seg+0xd4>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <control_led7seg+0xd8>)
 8000888:	fb83 1302 	smull	r1, r3, r3, r2
 800088c:	1099      	asrs	r1, r3, #2
 800088e:	17d3      	asrs	r3, r2, #31
 8000890:	1ac9      	subs	r1, r1, r3
 8000892:	460b      	mov	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	1ad1      	subs	r1, r2, r3
 800089c:	4608      	mov	r0, r1
 800089e:	f000 f90b 	bl	8000ab8 <display7SEG1>
			display7SEG2(time_road2 % 10);
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <control_led7seg+0xdc>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <control_led7seg+0xd8>)
 80008a8:	fb83 1302 	smull	r1, r3, r3, r2
 80008ac:	1099      	asrs	r1, r3, #2
 80008ae:	17d3      	asrs	r3, r2, #31
 80008b0:	1ac9      	subs	r1, r1, r3
 80008b2:	460b      	mov	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	1ad1      	subs	r1, r2, r3
 80008bc:	4608      	mov	r0, r1
 80008be:	f000 fa8b 	bl	8000dd8 <display7SEG2>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
			display7SEG1(time_road1 / 10);
			display7SEG2(time_road2 / 10);
		}
	}
}
 80008c2:	e021      	b.n	8000908 <control_led7seg+0xc4>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <control_led7seg+0xd0>)
 80008cc:	f001 fb95 	bl	8001ffa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <control_led7seg+0xd0>)
 80008d8:	f001 fb8f 	bl	8001ffa <HAL_GPIO_WritePin>
			display7SEG1(time_road1 / 10);
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <control_led7seg+0xd4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <control_led7seg+0xd8>)
 80008e2:	fb82 1203 	smull	r1, r2, r2, r3
 80008e6:	1092      	asrs	r2, r2, #2
 80008e8:	17db      	asrs	r3, r3, #31
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f8e3 	bl	8000ab8 <display7SEG1>
			display7SEG2(time_road2 / 10);
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <control_led7seg+0xdc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <control_led7seg+0xd8>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1092      	asrs	r2, r2, #2
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa68 	bl	8000dd8 <display7SEG2>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000d8 	.word	0x200000d8
 8000910:	200000bc 	.word	0x200000bc
 8000914:	40010800 	.word	0x40010800
 8000918:	200000c4 	.word	0x200000c4
 800091c:	66666667 	.word	0x66666667
 8000920:	200000c8 	.word	0x200000c8

08000924 <led7seg1_on>:
void led7seg1_on(){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <led7seg1_on+0x20>)
 8000930:	f001 fb63 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093a:	4802      	ldr	r0, [pc, #8]	; (8000944 <led7seg1_on+0x20>)
 800093c:	f001 fb5d 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010800 	.word	0x40010800

08000948 <control_lightTraffic>:
#include "control_lightTraffic.h"

int state_lightTraffic = RED1_GREEN2;


void control_lightTraffic(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

	switch(state_lightTraffic){
 800094c:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <control_lightTraffic+0xec>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3b01      	subs	r3, #1
 8000952:	2b03      	cmp	r3, #3
 8000954:	d862      	bhi.n	8000a1c <control_lightTraffic+0xd4>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <control_lightTraffic+0x14>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	0800096d 	.word	0x0800096d
 8000960:	08000999 	.word	0x08000999
 8000964:	080009c5 	.word	0x080009c5
 8000968:	080009f1 	.word	0x080009f1
	case RED1_GREEN2:
		red1_green2();
 800096c:	f000 fc12 	bl	8001194 <red1_green2>
		if(time_road2 <= 0){
 8000970:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <control_lightTraffic+0xf0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	dc53      	bgt.n	8000a20 <control_lightTraffic+0xd8>
			state_lightTraffic = RED1_YELLOW2;
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <control_lightTraffic+0xec>)
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 800097e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000982:	f000 fef5 	bl	8001770 <setTimer1>
			time_road1 = time_road1;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <control_lightTraffic+0xf4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <control_lightTraffic+0xf4>)
 800098c:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <control_lightTraffic+0xf8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <control_lightTraffic+0xf0>)
 8000994:	6013      	str	r3, [r2, #0]
		}
		break;
 8000996:	e043      	b.n	8000a20 <control_lightTraffic+0xd8>
	case RED1_YELLOW2:
		red1_yellow2();
 8000998:	f000 fc28 	bl	80011ec <red1_yellow2>
		if(time_road2 <= 0){
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <control_lightTraffic+0xf0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dc3f      	bgt.n	8000a24 <control_lightTraffic+0xdc>
			state_lightTraffic = GREEN1_RED2;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <control_lightTraffic+0xec>)
 80009a6:	2203      	movs	r2, #3
 80009a8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f000 fedf 	bl	8001770 <setTimer1>
			time_road1 = time_green1;
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <control_lightTraffic+0xfc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <control_lightTraffic+0xf4>)
 80009b8:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <control_lightTraffic+0x100>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <control_lightTraffic+0xf0>)
 80009c0:	6013      	str	r3, [r2, #0]
		}
		break;
 80009c2:	e02f      	b.n	8000a24 <control_lightTraffic+0xdc>
	case GREEN1_RED2:
		green1_red2();
 80009c4:	f000 fc3e 	bl	8001244 <green1_red2>
		if(time_road1 <= 0){
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <control_lightTraffic+0xf4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dc2b      	bgt.n	8000a28 <control_lightTraffic+0xe0>
			state_lightTraffic = YELLOW1_RED2;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <control_lightTraffic+0xec>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f000 fec9 	bl	8001770 <setTimer1>
			time_road1 = time_yellow1;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <control_lightTraffic+0x104>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <control_lightTraffic+0xf4>)
 80009e4:	6013      	str	r3, [r2, #0]
			time_road2 = time_road2;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <control_lightTraffic+0xf0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <control_lightTraffic+0xf0>)
 80009ec:	6013      	str	r3, [r2, #0]
		}
		break;
 80009ee:	e01b      	b.n	8000a28 <control_lightTraffic+0xe0>
	case YELLOW1_RED2:
		yellow1_red2();
 80009f0:	f000 fc54 	bl	800129c <yellow1_red2>
		if(time_road1 <= 0){
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <control_lightTraffic+0xf4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dc17      	bgt.n	8000a2c <control_lightTraffic+0xe4>
			state_lightTraffic = RED1_GREEN2;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <control_lightTraffic+0xec>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 8000a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a06:	f000 feb3 	bl	8001770 <setTimer1>
			time_road1 = time_red1;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <control_lightTraffic+0x108>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <control_lightTraffic+0xf4>)
 8000a10:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <control_lightTraffic+0x10c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <control_lightTraffic+0xf0>)
 8000a18:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a1a:	e007      	b.n	8000a2c <control_lightTraffic+0xe4>
	default:
		break;
 8000a1c:	bf00      	nop
 8000a1e:	e006      	b.n	8000a2e <control_lightTraffic+0xe6>
		break;
 8000a20:	bf00      	nop
 8000a22:	e004      	b.n	8000a2e <control_lightTraffic+0xe6>
		break;
 8000a24:	bf00      	nop
 8000a26:	e002      	b.n	8000a2e <control_lightTraffic+0xe6>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <control_lightTraffic+0xe6>
		break;
 8000a2c:	bf00      	nop
	}
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000003c 	.word	0x2000003c
 8000a38:	200000c8 	.word	0x200000c8
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	20000050 	.word	0x20000050
 8000a44:	20000048 	.word	0x20000048
 8000a48:	2000004c 	.word	0x2000004c
 8000a4c:	20000044 	.word	0x20000044
 8000a50:	20000040 	.word	0x20000040
 8000a54:	20000054 	.word	0x20000054

08000a58 <blink_red>:

void blink_red(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <blink_red+0x1c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d104      	bne.n	8000a6e <blink_red+0x16>
		setTimer3(250);//0.25s
 8000a64:	20fa      	movs	r0, #250	; 0xfa
 8000a66:	f000 feb7 	bl	80017d8 <setTimer3>
		control_blink_red();
 8000a6a:	f000 fcc7 	bl	80013fc <control_blink_red>
	}
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000e0 	.word	0x200000e0

08000a78 <blink_yellow>:
void blink_yellow(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <blink_yellow+0x1c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <blink_yellow+0x16>
		setTimer3(250);//0.25s
 8000a84:	20fa      	movs	r0, #250	; 0xfa
 8000a86:	f000 fea7 	bl	80017d8 <setTimer3>
		control_blink_yellow();
 8000a8a:	f000 fce1 	bl	8001450 <control_blink_yellow>
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000e0 	.word	0x200000e0

08000a98 <blink_green>:
void blink_green(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <blink_green+0x1c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d104      	bne.n	8000aae <blink_green+0x16>
		setTimer3(250);//0.25s
 8000aa4:	20fa      	movs	r0, #250	; 0xfa
 8000aa6:	f000 fe97 	bl	80017d8 <setTimer3>
		control_blink_green();
 8000aaa:	f000 fcfb 	bl	80014a4 <control_blink_green>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000e0 	.word	0x200000e0

08000ab8 <display7SEG1>:
 *
 *  Created on: Nov 10, 2023
 *      Author: ASUS TUF GAMING
 */
#include "displayLed7seg.h"
  void display7SEG1(int state){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b09      	cmp	r3, #9
 8000ac4:	f200 8180 	bhi.w	8000dc8 <display7SEG1+0x310>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <display7SEG1+0x18>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	08000b41 	.word	0x08000b41
 8000ad8:	08000b89 	.word	0x08000b89
 8000adc:	08000bd1 	.word	0x08000bd1
 8000ae0:	08000c19 	.word	0x08000c19
 8000ae4:	08000c61 	.word	0x08000c61
 8000ae8:	08000ca9 	.word	0x08000ca9
 8000aec:	08000cf1 	.word	0x08000cf1
 8000af0:	08000d39 	.word	0x08000d39
 8000af4:	08000d81 	.word	0x08000d81
	  switch(state){
	  case 0:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2102      	movs	r1, #2
 8000afc:	48b5      	ldr	r0, [pc, #724]	; (8000dd4 <display7SEG1+0x31c>)
 8000afe:	f001 fa7c 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2104      	movs	r1, #4
 8000b06:	48b3      	ldr	r0, [pc, #716]	; (8000dd4 <display7SEG1+0x31c>)
 8000b08:	f001 fa77 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2108      	movs	r1, #8
 8000b10:	48b0      	ldr	r0, [pc, #704]	; (8000dd4 <display7SEG1+0x31c>)
 8000b12:	f001 fa72 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2110      	movs	r1, #16
 8000b1a:	48ae      	ldr	r0, [pc, #696]	; (8000dd4 <display7SEG1+0x31c>)
 8000b1c:	f001 fa6d 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2120      	movs	r1, #32
 8000b24:	48ab      	ldr	r0, [pc, #684]	; (8000dd4 <display7SEG1+0x31c>)
 8000b26:	f001 fa68 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	48a9      	ldr	r0, [pc, #676]	; (8000dd4 <display7SEG1+0x31c>)
 8000b30:	f001 fa63 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	48a6      	ldr	r0, [pc, #664]	; (8000dd4 <display7SEG1+0x31c>)
 8000b3a:	f001 fa5e 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000b3e:	e144      	b.n	8000dca <display7SEG1+0x312>
	  case 1:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	48a3      	ldr	r0, [pc, #652]	; (8000dd4 <display7SEG1+0x31c>)
 8000b46:	f001 fa58 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	48a1      	ldr	r0, [pc, #644]	; (8000dd4 <display7SEG1+0x31c>)
 8000b50:	f001 fa53 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2108      	movs	r1, #8
 8000b58:	489e      	ldr	r0, [pc, #632]	; (8000dd4 <display7SEG1+0x31c>)
 8000b5a:	f001 fa4e 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2110      	movs	r1, #16
 8000b62:	489c      	ldr	r0, [pc, #624]	; (8000dd4 <display7SEG1+0x31c>)
 8000b64:	f001 fa49 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	4899      	ldr	r0, [pc, #612]	; (8000dd4 <display7SEG1+0x31c>)
 8000b6e:	f001 fa44 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	4897      	ldr	r0, [pc, #604]	; (8000dd4 <display7SEG1+0x31c>)
 8000b78:	f001 fa3f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	4894      	ldr	r0, [pc, #592]	; (8000dd4 <display7SEG1+0x31c>)
 8000b82:	f001 fa3a 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000b86:	e120      	b.n	8000dca <display7SEG1+0x312>
	  case 2:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4891      	ldr	r0, [pc, #580]	; (8000dd4 <display7SEG1+0x31c>)
 8000b8e:	f001 fa34 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2104      	movs	r1, #4
 8000b96:	488f      	ldr	r0, [pc, #572]	; (8000dd4 <display7SEG1+0x31c>)
 8000b98:	f001 fa2f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	488c      	ldr	r0, [pc, #560]	; (8000dd4 <display7SEG1+0x31c>)
 8000ba2:	f001 fa2a 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	488a      	ldr	r0, [pc, #552]	; (8000dd4 <display7SEG1+0x31c>)
 8000bac:	f001 fa25 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4887      	ldr	r0, [pc, #540]	; (8000dd4 <display7SEG1+0x31c>)
 8000bb6:	f001 fa20 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	4885      	ldr	r0, [pc, #532]	; (8000dd4 <display7SEG1+0x31c>)
 8000bc0:	f001 fa1b 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	4882      	ldr	r0, [pc, #520]	; (8000dd4 <display7SEG1+0x31c>)
 8000bca:	f001 fa16 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000bce:	e0fc      	b.n	8000dca <display7SEG1+0x312>
	  case 3:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	487f      	ldr	r0, [pc, #508]	; (8000dd4 <display7SEG1+0x31c>)
 8000bd6:	f001 fa10 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2104      	movs	r1, #4
 8000bde:	487d      	ldr	r0, [pc, #500]	; (8000dd4 <display7SEG1+0x31c>)
 8000be0:	f001 fa0b 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2108      	movs	r1, #8
 8000be8:	487a      	ldr	r0, [pc, #488]	; (8000dd4 <display7SEG1+0x31c>)
 8000bea:	f001 fa06 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	4878      	ldr	r0, [pc, #480]	; (8000dd4 <display7SEG1+0x31c>)
 8000bf4:	f001 fa01 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	4875      	ldr	r0, [pc, #468]	; (8000dd4 <display7SEG1+0x31c>)
 8000bfe:	f001 f9fc 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	4873      	ldr	r0, [pc, #460]	; (8000dd4 <display7SEG1+0x31c>)
 8000c08:	f001 f9f7 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	4870      	ldr	r0, [pc, #448]	; (8000dd4 <display7SEG1+0x31c>)
 8000c12:	f001 f9f2 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000c16:	e0d8      	b.n	8000dca <display7SEG1+0x312>
	  case 4:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	486d      	ldr	r0, [pc, #436]	; (8000dd4 <display7SEG1+0x31c>)
 8000c1e:	f001 f9ec 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2104      	movs	r1, #4
 8000c26:	486b      	ldr	r0, [pc, #428]	; (8000dd4 <display7SEG1+0x31c>)
 8000c28:	f001 f9e7 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4868      	ldr	r0, [pc, #416]	; (8000dd4 <display7SEG1+0x31c>)
 8000c32:	f001 f9e2 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4866      	ldr	r0, [pc, #408]	; (8000dd4 <display7SEG1+0x31c>)
 8000c3c:	f001 f9dd 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2120      	movs	r1, #32
 8000c44:	4863      	ldr	r0, [pc, #396]	; (8000dd4 <display7SEG1+0x31c>)
 8000c46:	f001 f9d8 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	4861      	ldr	r0, [pc, #388]	; (8000dd4 <display7SEG1+0x31c>)
 8000c50:	f001 f9d3 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	485e      	ldr	r0, [pc, #376]	; (8000dd4 <display7SEG1+0x31c>)
 8000c5a:	f001 f9ce 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000c5e:	e0b4      	b.n	8000dca <display7SEG1+0x312>
	  case 5:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2102      	movs	r1, #2
 8000c64:	485b      	ldr	r0, [pc, #364]	; (8000dd4 <display7SEG1+0x31c>)
 8000c66:	f001 f9c8 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4859      	ldr	r0, [pc, #356]	; (8000dd4 <display7SEG1+0x31c>)
 8000c70:	f001 f9c3 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2108      	movs	r1, #8
 8000c78:	4856      	ldr	r0, [pc, #344]	; (8000dd4 <display7SEG1+0x31c>)
 8000c7a:	f001 f9be 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2110      	movs	r1, #16
 8000c82:	4854      	ldr	r0, [pc, #336]	; (8000dd4 <display7SEG1+0x31c>)
 8000c84:	f001 f9b9 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	4851      	ldr	r0, [pc, #324]	; (8000dd4 <display7SEG1+0x31c>)
 8000c8e:	f001 f9b4 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	484f      	ldr	r0, [pc, #316]	; (8000dd4 <display7SEG1+0x31c>)
 8000c98:	f001 f9af 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	484c      	ldr	r0, [pc, #304]	; (8000dd4 <display7SEG1+0x31c>)
 8000ca2:	f001 f9aa 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000ca6:	e090      	b.n	8000dca <display7SEG1+0x312>
	  case 6:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	4849      	ldr	r0, [pc, #292]	; (8000dd4 <display7SEG1+0x31c>)
 8000cae:	f001 f9a4 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4847      	ldr	r0, [pc, #284]	; (8000dd4 <display7SEG1+0x31c>)
 8000cb8:	f001 f99f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4844      	ldr	r0, [pc, #272]	; (8000dd4 <display7SEG1+0x31c>)
 8000cc2:	f001 f99a 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4842      	ldr	r0, [pc, #264]	; (8000dd4 <display7SEG1+0x31c>)
 8000ccc:	f001 f995 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	483f      	ldr	r0, [pc, #252]	; (8000dd4 <display7SEG1+0x31c>)
 8000cd6:	f001 f990 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	483d      	ldr	r0, [pc, #244]	; (8000dd4 <display7SEG1+0x31c>)
 8000ce0:	f001 f98b 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	483a      	ldr	r0, [pc, #232]	; (8000dd4 <display7SEG1+0x31c>)
 8000cea:	f001 f986 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000cee:	e06c      	b.n	8000dca <display7SEG1+0x312>
	  case 7:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4837      	ldr	r0, [pc, #220]	; (8000dd4 <display7SEG1+0x31c>)
 8000cf6:	f001 f980 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <display7SEG1+0x31c>)
 8000d00:	f001 f97b 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2108      	movs	r1, #8
 8000d08:	4832      	ldr	r0, [pc, #200]	; (8000dd4 <display7SEG1+0x31c>)
 8000d0a:	f001 f976 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2110      	movs	r1, #16
 8000d12:	4830      	ldr	r0, [pc, #192]	; (8000dd4 <display7SEG1+0x31c>)
 8000d14:	f001 f971 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	482d      	ldr	r0, [pc, #180]	; (8000dd4 <display7SEG1+0x31c>)
 8000d1e:	f001 f96c 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <display7SEG1+0x31c>)
 8000d28:	f001 f967 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	4828      	ldr	r0, [pc, #160]	; (8000dd4 <display7SEG1+0x31c>)
 8000d32:	f001 f962 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000d36:	e048      	b.n	8000dca <display7SEG1+0x312>
	  case 8:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <display7SEG1+0x31c>)
 8000d3e:	f001 f95c 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2104      	movs	r1, #4
 8000d46:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <display7SEG1+0x31c>)
 8000d48:	f001 f957 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2108      	movs	r1, #8
 8000d50:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <display7SEG1+0x31c>)
 8000d52:	f001 f952 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2110      	movs	r1, #16
 8000d5a:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <display7SEG1+0x31c>)
 8000d5c:	f001 f94d 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2120      	movs	r1, #32
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <display7SEG1+0x31c>)
 8000d66:	f001 f948 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <display7SEG1+0x31c>)
 8000d70:	f001 f943 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <display7SEG1+0x31c>)
 8000d7a:	f001 f93e 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000d7e:	e024      	b.n	8000dca <display7SEG1+0x312>
	  case 9:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2102      	movs	r1, #2
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <display7SEG1+0x31c>)
 8000d86:	f001 f938 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <display7SEG1+0x31c>)
 8000d90:	f001 f933 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <display7SEG1+0x31c>)
 8000d9a:	f001 f92e 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2110      	movs	r1, #16
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <display7SEG1+0x31c>)
 8000da4:	f001 f929 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2120      	movs	r1, #32
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <display7SEG1+0x31c>)
 8000dae:	f001 f924 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <display7SEG1+0x31c>)
 8000db8:	f001 f91f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <display7SEG1+0x31c>)
 8000dc2:	f001 f91a 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000dc6:	e000      	b.n	8000dca <display7SEG1+0x312>
	  default:
	  		  break;
 8000dc8:	bf00      	nop
	  }
  }
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <display7SEG2>:
  void display7SEG2(int state){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b09      	cmp	r3, #9
 8000de4:	f200 8180 	bhi.w	80010e8 <display7SEG2+0x310>
 8000de8:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <display7SEG2+0x18>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e19 	.word	0x08000e19
 8000df4:	08000e61 	.word	0x08000e61
 8000df8:	08000ea9 	.word	0x08000ea9
 8000dfc:	08000ef1 	.word	0x08000ef1
 8000e00:	08000f39 	.word	0x08000f39
 8000e04:	08000f81 	.word	0x08000f81
 8000e08:	08000fc9 	.word	0x08000fc9
 8000e0c:	08001011 	.word	0x08001011
 8000e10:	08001059 	.word	0x08001059
 8000e14:	080010a1 	.word	0x080010a1
	  switch(state){
	  case 0:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	48b5      	ldr	r0, [pc, #724]	; (80010f4 <display7SEG2+0x31c>)
 8000e1e:	f001 f8ec 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2102      	movs	r1, #2
 8000e26:	48b3      	ldr	r0, [pc, #716]	; (80010f4 <display7SEG2+0x31c>)
 8000e28:	f001 f8e7 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	48b0      	ldr	r0, [pc, #704]	; (80010f4 <display7SEG2+0x31c>)
 8000e32:	f001 f8e2 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2108      	movs	r1, #8
 8000e3a:	48ae      	ldr	r0, [pc, #696]	; (80010f4 <display7SEG2+0x31c>)
 8000e3c:	f001 f8dd 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2110      	movs	r1, #16
 8000e44:	48ab      	ldr	r0, [pc, #684]	; (80010f4 <display7SEG2+0x31c>)
 8000e46:	f001 f8d8 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	48a9      	ldr	r0, [pc, #676]	; (80010f4 <display7SEG2+0x31c>)
 8000e50:	f001 f8d3 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	48a6      	ldr	r0, [pc, #664]	; (80010f4 <display7SEG2+0x31c>)
 8000e5a:	f001 f8ce 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000e5e:	e144      	b.n	80010ea <display7SEG2+0x312>
	  case 1:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	48a3      	ldr	r0, [pc, #652]	; (80010f4 <display7SEG2+0x31c>)
 8000e66:	f001 f8c8 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	48a1      	ldr	r0, [pc, #644]	; (80010f4 <display7SEG2+0x31c>)
 8000e70:	f001 f8c3 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	489e      	ldr	r0, [pc, #632]	; (80010f4 <display7SEG2+0x31c>)
 8000e7a:	f001 f8be 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2108      	movs	r1, #8
 8000e82:	489c      	ldr	r0, [pc, #624]	; (80010f4 <display7SEG2+0x31c>)
 8000e84:	f001 f8b9 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4899      	ldr	r0, [pc, #612]	; (80010f4 <display7SEG2+0x31c>)
 8000e8e:	f001 f8b4 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2120      	movs	r1, #32
 8000e96:	4897      	ldr	r0, [pc, #604]	; (80010f4 <display7SEG2+0x31c>)
 8000e98:	f001 f8af 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	4894      	ldr	r0, [pc, #592]	; (80010f4 <display7SEG2+0x31c>)
 8000ea2:	f001 f8aa 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000ea6:	e120      	b.n	80010ea <display7SEG2+0x312>
	  case 2:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4891      	ldr	r0, [pc, #580]	; (80010f4 <display7SEG2+0x31c>)
 8000eae:	f001 f8a4 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	488f      	ldr	r0, [pc, #572]	; (80010f4 <display7SEG2+0x31c>)
 8000eb8:	f001 f89f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	488c      	ldr	r0, [pc, #560]	; (80010f4 <display7SEG2+0x31c>)
 8000ec2:	f001 f89a 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2108      	movs	r1, #8
 8000eca:	488a      	ldr	r0, [pc, #552]	; (80010f4 <display7SEG2+0x31c>)
 8000ecc:	f001 f895 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4887      	ldr	r0, [pc, #540]	; (80010f4 <display7SEG2+0x31c>)
 8000ed6:	f001 f890 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2120      	movs	r1, #32
 8000ede:	4885      	ldr	r0, [pc, #532]	; (80010f4 <display7SEG2+0x31c>)
 8000ee0:	f001 f88b 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	4882      	ldr	r0, [pc, #520]	; (80010f4 <display7SEG2+0x31c>)
 8000eea:	f001 f886 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000eee:	e0fc      	b.n	80010ea <display7SEG2+0x312>
	  case 3:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	487f      	ldr	r0, [pc, #508]	; (80010f4 <display7SEG2+0x31c>)
 8000ef6:	f001 f880 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	487d      	ldr	r0, [pc, #500]	; (80010f4 <display7SEG2+0x31c>)
 8000f00:	f001 f87b 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	487a      	ldr	r0, [pc, #488]	; (80010f4 <display7SEG2+0x31c>)
 8000f0a:	f001 f876 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2108      	movs	r1, #8
 8000f12:	4878      	ldr	r0, [pc, #480]	; (80010f4 <display7SEG2+0x31c>)
 8000f14:	f001 f871 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4875      	ldr	r0, [pc, #468]	; (80010f4 <display7SEG2+0x31c>)
 8000f1e:	f001 f86c 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2120      	movs	r1, #32
 8000f26:	4873      	ldr	r0, [pc, #460]	; (80010f4 <display7SEG2+0x31c>)
 8000f28:	f001 f867 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	4870      	ldr	r0, [pc, #448]	; (80010f4 <display7SEG2+0x31c>)
 8000f32:	f001 f862 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000f36:	e0d8      	b.n	80010ea <display7SEG2+0x312>
	  case 4:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	486d      	ldr	r0, [pc, #436]	; (80010f4 <display7SEG2+0x31c>)
 8000f3e:	f001 f85c 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2102      	movs	r1, #2
 8000f46:	486b      	ldr	r0, [pc, #428]	; (80010f4 <display7SEG2+0x31c>)
 8000f48:	f001 f857 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4868      	ldr	r0, [pc, #416]	; (80010f4 <display7SEG2+0x31c>)
 8000f52:	f001 f852 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4866      	ldr	r0, [pc, #408]	; (80010f4 <display7SEG2+0x31c>)
 8000f5c:	f001 f84d 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2110      	movs	r1, #16
 8000f64:	4863      	ldr	r0, [pc, #396]	; (80010f4 <display7SEG2+0x31c>)
 8000f66:	f001 f848 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4861      	ldr	r0, [pc, #388]	; (80010f4 <display7SEG2+0x31c>)
 8000f70:	f001 f843 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	485e      	ldr	r0, [pc, #376]	; (80010f4 <display7SEG2+0x31c>)
 8000f7a:	f001 f83e 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000f7e:	e0b4      	b.n	80010ea <display7SEG2+0x312>
	  case 5:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	485b      	ldr	r0, [pc, #364]	; (80010f4 <display7SEG2+0x31c>)
 8000f86:	f001 f838 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4859      	ldr	r0, [pc, #356]	; (80010f4 <display7SEG2+0x31c>)
 8000f90:	f001 f833 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2104      	movs	r1, #4
 8000f98:	4856      	ldr	r0, [pc, #344]	; (80010f4 <display7SEG2+0x31c>)
 8000f9a:	f001 f82e 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	4854      	ldr	r0, [pc, #336]	; (80010f4 <display7SEG2+0x31c>)
 8000fa4:	f001 f829 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2110      	movs	r1, #16
 8000fac:	4851      	ldr	r0, [pc, #324]	; (80010f4 <display7SEG2+0x31c>)
 8000fae:	f001 f824 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	484f      	ldr	r0, [pc, #316]	; (80010f4 <display7SEG2+0x31c>)
 8000fb8:	f001 f81f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	484c      	ldr	r0, [pc, #304]	; (80010f4 <display7SEG2+0x31c>)
 8000fc2:	f001 f81a 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8000fc6:	e090      	b.n	80010ea <display7SEG2+0x312>
	  case 6:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4849      	ldr	r0, [pc, #292]	; (80010f4 <display7SEG2+0x31c>)
 8000fce:	f001 f814 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4847      	ldr	r0, [pc, #284]	; (80010f4 <display7SEG2+0x31c>)
 8000fd8:	f001 f80f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4844      	ldr	r0, [pc, #272]	; (80010f4 <display7SEG2+0x31c>)
 8000fe2:	f001 f80a 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4842      	ldr	r0, [pc, #264]	; (80010f4 <display7SEG2+0x31c>)
 8000fec:	f001 f805 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	483f      	ldr	r0, [pc, #252]	; (80010f4 <display7SEG2+0x31c>)
 8000ff6:	f001 f800 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	483d      	ldr	r0, [pc, #244]	; (80010f4 <display7SEG2+0x31c>)
 8001000:	f000 fffb 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	483a      	ldr	r0, [pc, #232]	; (80010f4 <display7SEG2+0x31c>)
 800100a:	f000 fff6 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 800100e:	e06c      	b.n	80010ea <display7SEG2+0x312>
	  case 7:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	4837      	ldr	r0, [pc, #220]	; (80010f4 <display7SEG2+0x31c>)
 8001016:	f000 fff0 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	4835      	ldr	r0, [pc, #212]	; (80010f4 <display7SEG2+0x31c>)
 8001020:	f000 ffeb 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2104      	movs	r1, #4
 8001028:	4832      	ldr	r0, [pc, #200]	; (80010f4 <display7SEG2+0x31c>)
 800102a:	f000 ffe6 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	4830      	ldr	r0, [pc, #192]	; (80010f4 <display7SEG2+0x31c>)
 8001034:	f000 ffe1 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	482d      	ldr	r0, [pc, #180]	; (80010f4 <display7SEG2+0x31c>)
 800103e:	f000 ffdc 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2120      	movs	r1, #32
 8001046:	482b      	ldr	r0, [pc, #172]	; (80010f4 <display7SEG2+0x31c>)
 8001048:	f000 ffd7 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	4828      	ldr	r0, [pc, #160]	; (80010f4 <display7SEG2+0x31c>)
 8001052:	f000 ffd2 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 8001056:	e048      	b.n	80010ea <display7SEG2+0x312>
	  case 8:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2101      	movs	r1, #1
 800105c:	4825      	ldr	r0, [pc, #148]	; (80010f4 <display7SEG2+0x31c>)
 800105e:	f000 ffcc 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2102      	movs	r1, #2
 8001066:	4823      	ldr	r0, [pc, #140]	; (80010f4 <display7SEG2+0x31c>)
 8001068:	f000 ffc7 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2104      	movs	r1, #4
 8001070:	4820      	ldr	r0, [pc, #128]	; (80010f4 <display7SEG2+0x31c>)
 8001072:	f000 ffc2 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2108      	movs	r1, #8
 800107a:	481e      	ldr	r0, [pc, #120]	; (80010f4 <display7SEG2+0x31c>)
 800107c:	f000 ffbd 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	481b      	ldr	r0, [pc, #108]	; (80010f4 <display7SEG2+0x31c>)
 8001086:	f000 ffb8 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2120      	movs	r1, #32
 800108e:	4819      	ldr	r0, [pc, #100]	; (80010f4 <display7SEG2+0x31c>)
 8001090:	f000 ffb3 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <display7SEG2+0x31c>)
 800109a:	f000 ffae 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 800109e:	e024      	b.n	80010ea <display7SEG2+0x312>
	  case 9:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <display7SEG2+0x31c>)
 80010a6:	f000 ffa8 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2102      	movs	r1, #2
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <display7SEG2+0x31c>)
 80010b0:	f000 ffa3 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2104      	movs	r1, #4
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <display7SEG2+0x31c>)
 80010ba:	f000 ff9e 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2108      	movs	r1, #8
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <display7SEG2+0x31c>)
 80010c4:	f000 ff99 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2110      	movs	r1, #16
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <display7SEG2+0x31c>)
 80010ce:	f000 ff94 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <display7SEG2+0x31c>)
 80010d8:	f000 ff8f 	bl	8001ffa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <display7SEG2+0x31c>)
 80010e2:	f000 ff8a 	bl	8001ffa <HAL_GPIO_WritePin>
		  break;
 80010e6:	e000      	b.n	80010ea <display7SEG2+0x312>
	  default:
	  		  break;
 80010e8:	bf00      	nop
	  }
  }
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <display7SEG_error>:

  void display7SEG_error(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2102      	movs	r1, #2
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <display7SEG_error+0x94>)
 8001102:	f000 ff7a 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2104      	movs	r1, #4
 800110a:	4820      	ldr	r0, [pc, #128]	; (800118c <display7SEG_error+0x94>)
 800110c:	f000 ff75 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2108      	movs	r1, #8
 8001114:	481d      	ldr	r0, [pc, #116]	; (800118c <display7SEG_error+0x94>)
 8001116:	f000 ff70 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <display7SEG_error+0x94>)
 8001120:	f000 ff6b 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	4818      	ldr	r0, [pc, #96]	; (800118c <display7SEG_error+0x94>)
 800112a:	f000 ff66 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <display7SEG_error+0x94>)
 8001134:	f000 ff61 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <display7SEG_error+0x94>)
 800113e:	f000 ff5c 	bl	8001ffa <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2101      	movs	r1, #1
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <display7SEG_error+0x98>)
 8001148:	f000 ff57 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2102      	movs	r1, #2
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <display7SEG_error+0x98>)
 8001152:	f000 ff52 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2104      	movs	r1, #4
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <display7SEG_error+0x98>)
 800115c:	f000 ff4d 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2108      	movs	r1, #8
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <display7SEG_error+0x98>)
 8001166:	f000 ff48 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2110      	movs	r1, #16
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <display7SEG_error+0x98>)
 8001170:	f000 ff43 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2120      	movs	r1, #32
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <display7SEG_error+0x98>)
 800117a:	f000 ff3e 	bl	8001ffa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2140      	movs	r1, #64	; 0x40
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <display7SEG_error+0x98>)
 8001184:	f000 ff39 	bl	8001ffa <HAL_GPIO_WritePin>
  }
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00

08001194 <red1_green2>:
 *  Created on: Nov 3, 2023
 *      Author: ASUS TUF GAMING
 */
#include "displayLightTraffic.h"

void red1_green2(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <red1_green2+0x50>)
 80011a0:	f000 ff2b 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <red1_green2+0x50>)
 80011ac:	f000 ff25 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <red1_green2+0x50>)
 80011b8:	f000 ff1f 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <red1_green2+0x54>)
 80011c2:	f000 ff1a 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <red1_green2+0x54>)
 80011ce:	f000 ff14 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <red1_green2+0x54>)
 80011da:	f000 ff0e 	bl	8001ffa <HAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00

080011ec <red1_yellow2>:
void red1_yellow2(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <red1_yellow2+0x50>)
 80011f8:	f000 feff 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <red1_yellow2+0x50>)
 8001204:	f000 fef9 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <red1_yellow2+0x50>)
 8001210:	f000 fef3 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <red1_yellow2+0x54>)
 800121a:	f000 feee 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <red1_yellow2+0x54>)
 8001226:	f000 fee8 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <red1_yellow2+0x54>)
 8001232:	f000 fee2 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00

08001244 <green1_red2>:
void green1_red2(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	4811      	ldr	r0, [pc, #68]	; (8001294 <green1_red2+0x50>)
 8001250:	f000 fed3 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <green1_red2+0x50>)
 800125c:	f000 fecd 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <green1_red2+0x50>)
 8001268:	f000 fec7 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <green1_red2+0x54>)
 8001272:	f000 fec2 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <green1_red2+0x54>)
 800127e:	f000 febc 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <green1_red2+0x54>)
 800128a:	f000 feb6 	bl	8001ffa <HAL_GPIO_WritePin>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00

0800129c <yellow1_red2>:
void yellow1_red2(){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <yellow1_red2+0x50>)
 80012a8:	f000 fea7 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <yellow1_red2+0x50>)
 80012b4:	f000 fea1 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <yellow1_red2+0x50>)
 80012c0:	f000 fe9b 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <yellow1_red2+0x54>)
 80012ca:	f000 fe96 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <yellow1_red2+0x54>)
 80012d6:	f000 fe90 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <yellow1_red2+0x54>)
 80012e2:	f000 fe8a 	bl	8001ffa <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00

080012f4 <all_red_on>:
void all_red_on(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	4811      	ldr	r0, [pc, #68]	; (8001344 <all_red_on+0x50>)
 8001300:	f000 fe7b 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <all_red_on+0x50>)
 800130c:	f000 fe75 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <all_red_on+0x50>)
 8001318:	f000 fe6f 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <all_red_on+0x54>)
 8001322:	f000 fe6a 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <all_red_on+0x54>)
 800132e:	f000 fe64 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <all_red_on+0x54>)
 800133a:	f000 fe5e 	bl	8001ffa <HAL_GPIO_WritePin>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00

0800134c <all_yellow_on>:
void all_yellow_on(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <all_yellow_on+0x50>)
 8001358:	f000 fe4f 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <all_yellow_on+0x50>)
 8001364:	f000 fe49 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <all_yellow_on+0x50>)
 8001370:	f000 fe43 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <all_yellow_on+0x54>)
 800137a:	f000 fe3e 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <all_yellow_on+0x54>)
 8001386:	f000 fe38 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <all_yellow_on+0x54>)
 8001392:	f000 fe32 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <all_green_on>:
void all_green_on(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <all_green_on+0x50>)
 80013b0:	f000 fe23 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <all_green_on+0x50>)
 80013bc:	f000 fe1d 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <all_green_on+0x50>)
 80013c8:	f000 fe17 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <all_green_on+0x54>)
 80013d2:	f000 fe12 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <all_green_on+0x54>)
 80013de:	f000 fe0c 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <all_green_on+0x54>)
 80013ea:	f000 fe06 	bl	8001ffa <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00

080013fc <control_blink_red>:
void control_blink_red(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <control_blink_red+0x4c>)
 8001406:	f000 fe10 	bl	800202a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <control_blink_red+0x4c>)
 8001412:	f000 fdf2 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <control_blink_red+0x4c>)
 800141e:	f000 fdec 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_RED_GPIO_Port, LED2_RED_Pin);
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <control_blink_red+0x50>)
 8001426:	f000 fe00 	bl	800202a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <control_blink_red+0x50>)
 8001432:	f000 fde2 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <control_blink_red+0x50>)
 800143e:	f000 fddc 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00

08001450 <control_blink_yellow>:
void control_blink_yellow(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <control_blink_yellow+0x4c>)
 800145c:	f000 fdcd 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin);
 8001460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <control_blink_yellow+0x4c>)
 8001466:	f000 fde0 	bl	800202a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <control_blink_yellow+0x4c>)
 8001472:	f000 fdc2 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <control_blink_yellow+0x50>)
 800147c:	f000 fdbd 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin);
 8001480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <control_blink_yellow+0x50>)
 8001486:	f000 fdd0 	bl	800202a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <control_blink_yellow+0x50>)
 8001492:	f000 fdb2 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40010800 	.word	0x40010800
 80014a0:	40010c00 	.word	0x40010c00

080014a4 <control_blink_green>:
void control_blink_green(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <control_blink_green+0x4c>)
 80014b0:	f000 fda3 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <control_blink_green+0x4c>)
 80014bc:	f000 fd9d 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80014c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <control_blink_green+0x4c>)
 80014c6:	f000 fdb0 	bl	800202a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <control_blink_green+0x50>)
 80014d0:	f000 fd93 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <control_blink_green+0x50>)
 80014dc:	f000 fd8d 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <control_blink_green+0x50>)
 80014e6:	f000 fda0 	bl	800202a <HAL_GPIO_TogglePin>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <all_led_off>:
void all_led_off(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <all_led_off+0x50>)
 8001504:	f000 fd79 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <all_led_off+0x50>)
 8001510:	f000 fd73 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <all_led_off+0x50>)
 800151c:	f000 fd6d 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <all_led_off+0x54>)
 8001526:	f000 fd68 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <all_led_off+0x54>)
 8001532:	f000 fd62 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <all_led_off+0x54>)
 800153e:	f000 fd5c 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 fa50 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f80c 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 f892 	bl	8001684 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001560:	f000 f844 	bl	80015ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <main+0x20>)
 8001566:	f001 f9a5 	bl	80028b4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  control_all();
 800156a:	f7fe ffc7 	bl	80004fc <control_all>
 800156e:	e7fc      	b.n	800156a <main+0x1a>
 8001570:	200000e4 	.word	0x200000e4

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fd52 	bl	800302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159e:	2310      	movs	r3, #16
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fd56 	bl	800205c <HAL_RCC_OscConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015b6:	f000 f8d5 	bl	8001764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 ffc2 	bl	800255c <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015de:	f000 f8c1 	bl	8001764 <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM2_Init+0x94>)
 800160a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_TIM2_Init+0x94>)
 8001612:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_TIM2_Init+0x94>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM2_Init+0x94>)
 8001620:	2209      	movs	r2, #9
 8001622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_TIM2_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_TIM2_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_TIM2_Init+0x94>)
 8001632:	f001 f8ef 	bl	8002814 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800163c:	f000 f892 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM2_Init+0x94>)
 800164e:	f001 fa85 	bl	8002b5c <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001658:	f000 f884 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM2_Init+0x94>)
 800166a:	f001 fc51 	bl	8002f10 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 f876 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200000e4 	.word	0x200000e4

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MX_GPIO_Init+0xbc>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <MX_GPIO_Init+0xbc>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <MX_GPIO_Init+0xbc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <MX_GPIO_Init+0xbc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <MX_GPIO_Init+0xbc>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_GPIO_Init+0xbc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 80016c8:	2200      	movs	r2, #0
 80016ca:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 80016ce:	481d      	ldr	r0, [pc, #116]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016d0:	f000 fc93 	bl	8001ffa <HAL_GPIO_WritePin>
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|LED1_RED_Pin
                          |LED1_YELLOW_Pin|LED1_GREEN_Pin|ENM0_Pin|ENM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG2_A_Pin|SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin
 80016d4:	2200      	movs	r2, #0
 80016d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80016da:	481b      	ldr	r0, [pc, #108]	; (8001748 <MX_GPIO_Init+0xc4>)
 80016dc:	f000 fc8d 	bl	8001ffa <HAL_GPIO_WritePin>
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG1_A_Pin SEG1_B_Pin SEG1_C_Pin SEG1_D_Pin
                           SEG1_E_Pin SEG1_F_Pin SEG1_G_Pin LED1_RED_Pin
                           LED1_YELLOW_Pin LED1_GREEN_Pin ENM0_Pin ENM1_Pin */
  GPIO_InitStruct.Pin = SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 80016e0:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80016e4:	60bb      	str	r3, [r7, #8]
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|LED1_RED_Pin
                          |LED1_YELLOW_Pin|LED1_GREEN_Pin|ENM0_Pin|ENM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4619      	mov	r1, r3
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016fa:	f000 faed 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_A_Pin SEG2_B_Pin SEG2_C_Pin SEG2_D_Pin
                           SEG2_E_Pin SEG2_F_Pin SEG2_G_Pin LED2_RED_Pin
                           LED2_YELLOW_Pin LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = SEG2_A_Pin|SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin
 80016fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001702:	60bb      	str	r3, [r7, #8]
                          |SEG2_E_Pin|SEG2_F_Pin|SEG2_G_Pin|LED2_RED_Pin
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4619      	mov	r1, r3
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <MX_GPIO_Init+0xc4>)
 8001718:	f000 fade 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_TIME_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_TIME_Pin|BUTTON_SET_Pin;
 800171c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2301      	movs	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_GPIO_Init+0xc0>)
 8001732:	f000 fad1 	bl	8001cd8 <HAL_GPIO_Init>

}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00

0800174c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	timerRun();
 8001754:	f000 f85a 	bl	800180c <timerRun>
	get_key_input_all();
 8001758:	f7fe fe2c 	bl	80003b4 <get_key_input_all>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/DURATION_DIVIDE;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <setTimer1+0x28>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001782:	4a06      	ldr	r2, [pc, #24]	; (800179c <setTimer1+0x2c>)
 8001784:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <setTimer1+0x30>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000058 	.word	0x20000058
 800179c:	200000cc 	.word	0x200000cc
 80017a0:	200000d0 	.word	0x200000d0

080017a4 <setTimer2>:
void setTimer2(int duration){
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/DURATION_DIVIDE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <setTimer2+0x28>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <setTimer2+0x2c>)
 80017b8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <setTimer2+0x30>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000058 	.word	0x20000058
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	200000d8 	.word	0x200000d8

080017d8 <setTimer3>:
void setTimer3(int duration){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/DURATION_DIVIDE;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <setTimer3+0x28>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <setTimer3+0x2c>)
 80017ec:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <setTimer3+0x30>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000058 	.word	0x20000058
 8001804:	200000dc 	.word	0x200000dc
 8001808:	200000e0 	.word	0x200000e0

0800180c <timerRun>:

void timerRun(){
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <timerRun+0x6c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0b      	ble.n	8001830 <timerRun+0x24>
		timer1_counter--;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <timerRun+0x6c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <timerRun+0x6c>)
 8001820:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <timerRun+0x6c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dc02      	bgt.n	8001830 <timerRun+0x24>
			timer1_flag = 1;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <timerRun+0x70>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <timerRun+0x74>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd0b      	ble.n	8001850 <timerRun+0x44>
		timer2_counter--;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <timerRun+0x74>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <timerRun+0x74>)
 8001840:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <timerRun+0x74>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	dc02      	bgt.n	8001850 <timerRun+0x44>
			timer2_flag = 1;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <timerRun+0x78>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <timerRun+0x7c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd0b      	ble.n	8001870 <timerRun+0x64>
		timer3_counter--;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <timerRun+0x7c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <timerRun+0x7c>)
 8001860:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <timerRun+0x7c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dc02      	bgt.n	8001870 <timerRun+0x64>
			timer3_flag = 1;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <timerRun+0x80>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	200000cc 	.word	0x200000cc
 800187c:	200000d0 	.word	0x200000d0
 8001880:	200000d4 	.word	0x200000d4
 8001884:	200000d8 	.word	0x200000d8
 8001888:	200000dc 	.word	0x200000dc
 800188c:	200000e0 	.word	0x200000e0

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <HAL_MspInit+0x5c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_MspInit+0x5c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_MspInit+0x60>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_MspInit+0x60>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000

080018f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001904:	d113      	bne.n	800192e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_TIM_Base_MspInit+0x44>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_TIM_Base_MspInit+0x44>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_TIM_Base_MspInit+0x44>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	201c      	movs	r0, #28
 8001924:	f000 f9a1 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001928:	201c      	movs	r0, #28
 800192a:	f000 f9ba 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001982:	f000 f87f 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM2_IRQHandler+0x10>)
 8001992:	f000 ffdb 	bl	800294c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200000e4 	.word	0x200000e4

080019a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ac:	f7ff fff8 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019b2:	490c      	ldr	r1, [pc, #48]	; (80019e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c8:	4c09      	ldr	r4, [pc, #36]	; (80019f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f001 fb05 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019da:	f7ff fdb9 	bl	8001550 <main>
  bx lr
 80019de:	4770      	bx	lr
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019e8:	08003080 	.word	0x08003080
  ldr r2, =_sbss
 80019ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019f0:	20000130 	.word	0x20000130

080019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_2_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x28>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x28>)
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f923 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f000 f808 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff ff3c 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40022000 	.word	0x40022000

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f93b 	bl	8001cbe <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f903 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000005c 	.word	0x2000005c
 8001a7c:	20000064 	.word	0x20000064
 8001a80:	20000060 	.word	0x20000060

08001a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x1c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	20000064 	.word	0x20000064
 8001aa4:	2000012c 	.word	0x2000012c

08001aa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b02      	ldr	r3, [pc, #8]	; (8001ab8 <HAL_GetTick+0x10>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	2000012c 	.word	0x2000012c

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4906      	ldr	r1, [pc, #24]	; (8001b54 <__NVIC_EnableIRQ+0x34>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff90 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff2d 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff42 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff90 	bl	8001bac <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5f 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff35 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b08b      	sub	sp, #44	; 0x2c
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e148      	b.n	8001f7e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cec:	2201      	movs	r2, #1
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 8137 	bne.w	8001f78 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4aa3      	ldr	r2, [pc, #652]	; (8001f9c <HAL_GPIO_Init+0x2c4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d05e      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d14:	4aa1      	ldr	r2, [pc, #644]	; (8001f9c <HAL_GPIO_Init+0x2c4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d875      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d1a:	4aa1      	ldr	r2, [pc, #644]	; (8001fa0 <HAL_GPIO_Init+0x2c8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d058      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d20:	4a9f      	ldr	r2, [pc, #636]	; (8001fa0 <HAL_GPIO_Init+0x2c8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d86f      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d26:	4a9f      	ldr	r2, [pc, #636]	; (8001fa4 <HAL_GPIO_Init+0x2cc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d052      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d2c:	4a9d      	ldr	r2, [pc, #628]	; (8001fa4 <HAL_GPIO_Init+0x2cc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d869      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d32:	4a9d      	ldr	r2, [pc, #628]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04c      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d38:	4a9b      	ldr	r2, [pc, #620]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d863      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d3e:	4a9b      	ldr	r2, [pc, #620]	; (8001fac <HAL_GPIO_Init+0x2d4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d046      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d44:	4a99      	ldr	r2, [pc, #612]	; (8001fac <HAL_GPIO_Init+0x2d4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d85d      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d4a:	2b12      	cmp	r3, #18
 8001d4c:	d82a      	bhi.n	8001da4 <HAL_GPIO_Init+0xcc>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d859      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <HAL_GPIO_Init+0x80>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001dbf 	.word	0x08001dbf
 8001d64:	08001e01 	.word	0x08001e01
 8001d68:	08001e07 	.word	0x08001e07
 8001d6c:	08001e07 	.word	0x08001e07
 8001d70:	08001e07 	.word	0x08001e07
 8001d74:	08001e07 	.word	0x08001e07
 8001d78:	08001e07 	.word	0x08001e07
 8001d7c:	08001e07 	.word	0x08001e07
 8001d80:	08001e07 	.word	0x08001e07
 8001d84:	08001e07 	.word	0x08001e07
 8001d88:	08001e07 	.word	0x08001e07
 8001d8c:	08001e07 	.word	0x08001e07
 8001d90:	08001e07 	.word	0x08001e07
 8001d94:	08001e07 	.word	0x08001e07
 8001d98:	08001e07 	.word	0x08001e07
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001dc9 	.word	0x08001dc9
 8001da4:	4a82      	ldr	r2, [pc, #520]	; (8001fb0 <HAL_GPIO_Init+0x2d8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001daa:	e02c      	b.n	8001e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e029      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	3304      	adds	r3, #4
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e024      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e01f      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e01a      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e013      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
          break;
 8001df2:	e009      	b.n	8001e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	615a      	str	r2, [r3, #20]
          break;
 8001dfe:	e003      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          break;
 8001e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d801      	bhi.n	8001e12 <HAL_GPIO_Init+0x13a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_Init+0x13e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d802      	bhi.n	8001e24 <HAL_GPIO_Init+0x14c>
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x152>
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3b08      	subs	r3, #8
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	210f      	movs	r1, #15
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8090 	beq.w	8001f78 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e58:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_GPIO_Init+0x2dc>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a55      	ldr	r2, [pc, #340]	; (8001fb4 <HAL_GPIO_Init+0x2dc>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_GPIO_Init+0x2dc>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e70:	4a51      	ldr	r2, [pc, #324]	; (8001fb8 <HAL_GPIO_Init+0x2e0>)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_GPIO_Init+0x1e0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x1dc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_GPIO_Init+0x1d8>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1e2>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1e2>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1e2>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eca:	493b      	ldr	r1, [pc, #236]	; (8001fb8 <HAL_GPIO_Init+0x2e0>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4933      	ldr	r1, [pc, #204]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	492d      	ldr	r1, [pc, #180]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4929      	ldr	r1, [pc, #164]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4923      	ldr	r1, [pc, #140]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	491f      	ldr	r1, [pc, #124]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4919      	ldr	r1, [pc, #100]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4915      	ldr	r1, [pc, #84]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f aeaf 	bne.w	8001cec <HAL_GPIO_Init+0x14>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	372c      	adds	r7, #44	; 0x2c
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10310000 	.word	0x10310000
 8001fa4:	10220000 	.word	0x10220000
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40010400 	.word	0x40010400

08001fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e001      	b.n	8001fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	807b      	strh	r3, [r7, #2]
 8002006:	4613      	mov	r3, r2
 8002008:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200a:	787b      	ldrb	r3, [r7, #1]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002016:	e003      	b.n	8002020 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	611a      	str	r2, [r3, #16]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	041a      	lsls	r2, r3, #16
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43d9      	mvns	r1, r3
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	400b      	ands	r3, r1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e26c      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x12c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e246      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x76>
 80020c4:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x98>
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xbc>
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6e      	ldr	r2, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6a      	ldr	r2, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fcb6 	bl	8001aa8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fcb2 	bl	8001aa8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1fa      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe4>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fca2 	bl	8001aa8 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fc9e 	bl	8001aa8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1e6      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x10c>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021a2:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1ba      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4939      	ldr	r1, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fc57 	bl	8001aa8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff fc53 	bl	8001aa8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e19b      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fc36 	bl	8001aa8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff fc32 	bl	8001aa8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e17a      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03a      	beq.n	80022e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d019      	beq.n	80022a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fc16 	bl	8001aa8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fc12 	bl	8001aa8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e15a      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229e:	2001      	movs	r0, #1
 80022a0:	f000 fa9a 	bl	80027d8 <RCC_Delay>
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fbfc 	bl	8001aa8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fbf8 	bl	8001aa8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d908      	bls.n	80022d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e140      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	42420000 	.word	0x42420000
 80022d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e9      	bne.n	80022b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a6 	beq.w	800243a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b97      	ldr	r3, [pc, #604]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b94      	ldr	r3, [pc, #592]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a93      	ldr	r2, [pc, #588]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a8a      	ldr	r2, [pc, #552]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7ff fbb9 	bl	8001aa8 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7ff fbb5 	bl	8001aa8 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0fd      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x312>
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a7a      	ldr	r2, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e02d      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x334>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	e01c      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x356>
 8002398:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a69      	ldr	r2, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 80023b2:	4b67      	ldr	r3, [pc, #412]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a66      	ldr	r2, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d015      	beq.n	80023fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb69 	bl	8001aa8 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fb65 	bl	8001aa8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0ab      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ee      	beq.n	80023da <HAL_RCC_OscConfig+0x37e>
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fb53 	bl	8001aa8 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff fb4f 	bl	8001aa8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e095      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ee      	bne.n	8002406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8081 	beq.w	8002546 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d061      	beq.n	8002514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d146      	bne.n	80024e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_OscConfig+0x4fc>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fb23 	bl	8001aa8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff fb1f 	bl	8001aa8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e067      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	492d      	ldr	r1, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a19      	ldr	r1, [r3, #32]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	430b      	orrs	r3, r1
 80024b2:	4927      	ldr	r1, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x4fc>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7ff faf3 	bl	8001aa8 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7ff faef 	bl	8001aa8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e037      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46a>
 80024e4:	e02f      	b.n	8002546 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_RCC_OscConfig+0x4fc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fadc 	bl	8001aa8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7ff fad8 	bl	8001aa8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e020      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x498>
 8002512:	e018      	b.n	8002546 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e013      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	429a      	cmp	r2, r3
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	42420060 	.word	0x42420060

0800255c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d0      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4965      	ldr	r1, [pc, #404]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	494d      	ldr	r1, [pc, #308]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d040      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d115      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e073      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4936      	ldr	r1, [pc, #216]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7ff fa2c 	bl	8001aa8 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7ff fa28 	bl	8001aa8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e053      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d210      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4922      	ldr	r1, [pc, #136]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e032      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4916      	ldr	r1, [pc, #88]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490e      	ldr	r1, [pc, #56]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ea:	f000 f821 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490a      	ldr	r1, [pc, #40]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1cc>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f98a 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40022000 	.word	0x40022000
 8002720:	40021000 	.word	0x40021000
 8002724:	08003054 	.word	0x08003054
 8002728:	2000005c 	.word	0x2000005c
 800272c:	20000060 	.word	0x20000060

08002730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x30>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x36>
 800275e:	e027      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002762:	613b      	str	r3, [r7, #16]
      break;
 8002764:	e027      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	0c9b      	lsrs	r3, r3, #18
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002770:	5cd3      	ldrb	r3, [r2, r3]
 8002772:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	0c5b      	lsrs	r3, r3, #17
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002792:	fb02 f203 	mul.w	r2, r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e004      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	613b      	str	r3, [r7, #16]
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027b2:	613b      	str	r3, [r7, #16]
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	693b      	ldr	r3, [r7, #16]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	007a1200 	.word	0x007a1200
 80027cc:	08003064 	.word	0x08003064
 80027d0:	08003074 	.word	0x08003074
 80027d4:	003d0900 	.word	0x003d0900

080027d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <RCC_Delay+0x34>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <RCC_Delay+0x38>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a5b      	lsrs	r3, r3, #9
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f4:	bf00      	nop
  }
  while (Delay --);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <RCC_Delay+0x1c>
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	2000005c 	.word	0x2000005c
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e041      	b.n	80028aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff f85a 	bl	80018f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 fa6e 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e035      	b.n	8002938 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_TIM_Base_Start_IT+0x90>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x4e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d004      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x4e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_TIM_Base_Start_IT+0x94>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d111      	bne.n	8002926 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d010      	beq.n	8002936 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	e007      	b.n	8002936 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400

0800294c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0202 	mvn.w	r2, #2
 8002978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f9b4 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9a7 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f9b6 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0204 	mvn.w	r2, #4
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f98a 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f97d 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f98c 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0208 	mvn.w	r2, #8
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2204      	movs	r2, #4
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f960 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f953 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f962 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0210 	mvn.w	r2, #16
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f936 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f929 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f938 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0201 	mvn.w	r2, #1
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fe3e 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa6b 	bl	8002fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d10e      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d107      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8fc 	bl	8002d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d107      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0220 	mvn.w	r2, #32
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa36 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_ConfigClockSource+0x1c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0b4      	b.n	8002ce2 <HAL_TIM_ConfigClockSource+0x186>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	d03e      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0xd4>
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	f200 8087 	bhi.w	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	f000 8086 	beq.w	8002cce <HAL_TIM_ConfigClockSource+0x172>
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	d87f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b70      	cmp	r3, #112	; 0x70
 8002bca:	d01a      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0xa6>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d87b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d050      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x11a>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d877      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d03c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xfa>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d873      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d058      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x13a>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d86f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d064      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d86b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d060      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d867      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05c      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d05a      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c00:	e062      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f000 f95e 	bl	8002ed2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	609a      	str	r2, [r3, #8]
      break;
 8002c2e:	e04f      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f000 f947 	bl	8002ed2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c52:	609a      	str	r2, [r3, #8]
      break;
 8002c54:	e03c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 f8be 	bl	8002de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2150      	movs	r1, #80	; 0x50
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f915 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c74:	e02c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 f8dc 	bl	8002e40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2160      	movs	r1, #96	; 0x60
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f905 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c94:	e01c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 f89e 	bl	8002de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f8f5 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e00c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 f8ec 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002cc6:	e003      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
	...

08002d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <TIM_Base_SetConfig+0xa8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0x28>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0x28>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <TIM_Base_SetConfig+0xac>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <TIM_Base_SetConfig+0xa8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x52>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x52>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <TIM_Base_SetConfig+0xac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <TIM_Base_SetConfig+0xa8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400

08002de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 030a 	bic.w	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0210 	bic.w	r2, r3, #16
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	031b      	lsls	r3, r3, #12
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f043 0307 	orr.w	r3, r3, #7
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	021a      	lsls	r2, r3, #8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	609a      	str	r2, [r3, #8]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e041      	b.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d004      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10c      	bne.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	4d0c      	ldr	r5, [pc, #48]	; (800301c <__libc_init_array+0x38>)
 8002fea:	4c0d      	ldr	r4, [pc, #52]	; (8003020 <__libc_init_array+0x3c>)
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	42a6      	cmp	r6, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	f000 f822 	bl	800303c <_init>
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4d0a      	ldr	r5, [pc, #40]	; (8003024 <__libc_init_array+0x40>)
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	; (8003028 <__libc_init_array+0x44>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	42a6      	cmp	r6, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f855 3b04 	ldr.w	r3, [r5], #4
 800300c:	4798      	blx	r3
 800300e:	3601      	adds	r6, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f855 3b04 	ldr.w	r3, [r5], #4
 8003016:	4798      	blx	r3
 8003018:	3601      	adds	r6, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	08003078 	.word	0x08003078
 8003020:	08003078 	.word	0x08003078
 8003024:	08003078 	.word	0x08003078
 8003028:	0800307c 	.word	0x0800307c

0800302c <memset>:
 800302c:	4603      	mov	r3, r0
 800302e:	4402      	add	r2, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
