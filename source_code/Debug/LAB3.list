
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de0  08002de0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002de0  08002de0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de0  08002de0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000068  08002e50  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002e50  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009500  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b03  00000000  00000000  00029591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b5e  00000000  00000000  0002c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b45f  00000000  00000000  00042ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825d5  00000000  00000000  0004e455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  000d0a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da4 	.word	0x08002da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002da4 	.word	0x08002da4

0800014c <reset_all_button>:
int keyReg2[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int time_for_key_press[num_buttons] = {2000, 2000, 2000};

void reset_all_button(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i< num_buttons; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e00c      	b.n	8000172 <reset_all_button+0x26>
		button_flag_pressed_once[i] = 0;
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <reset_all_button+0x38>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag_pressed_hold[i] = 0;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <reset_all_button+0x3c>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i< num_buttons; i++){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3301      	adds	r3, #1
 8000170:	607b      	str	r3, [r7, #4]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	ddef      	ble.n	8000158 <reset_all_button+0xc>
	}
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000084 	.word	0x20000084
 8000188:	20000090 	.word	0x20000090

0800018c <key_n_process_pressed_once>:

void key_n_process_pressed_once(int n){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	button_flag_pressed_once[n] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <key_n_process_pressed_once+0x1c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000084 	.word	0x20000084

080001ac <key_n_process_pressed_hold>:
void key_n_process_pressed_hold(int n){
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	button_flag_pressed_hold[n] = 1;
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <key_n_process_pressed_hold+0x1c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2101      	movs	r1, #1
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000090 	.word	0x20000090

080001cc <is_button_pressed_once>:

int is_button_pressed_once(int n){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_once[n] == 1){
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <is_button_pressed_once+0x30>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d106      	bne.n	80001ee <is_button_pressed_once+0x22>
		button_flag_pressed_once[n] = 0;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <is_button_pressed_once+0x30>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2100      	movs	r1, #0
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e000      	b.n	80001f0 <is_button_pressed_once+0x24>
	}
	else {
		return 0;
 80001ee:	2300      	movs	r3, #0
	}
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000084 	.word	0x20000084

08000200 <is_button_pressed_hold>:
int is_button_pressed_hold(int n){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_hold[n] == 1){
 8000208:	4a09      	ldr	r2, [pc, #36]	; (8000230 <is_button_pressed_hold+0x30>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d106      	bne.n	8000222 <is_button_pressed_hold+0x22>
		button_flag_pressed_hold[n] = 0;
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <is_button_pressed_hold+0x30>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2100      	movs	r1, #0
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800021e:	2301      	movs	r3, #1
 8000220:	e000      	b.n	8000224 <is_button_pressed_hold+0x24>
	}
	else {
		return 0;
 8000222:	2300      	movs	r3, #0
	}
}
 8000224:	4618      	mov	r0, r3
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000090 	.word	0x20000090

08000234 <get_key_input>:



void get_key_input(int n){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	keyReg0[n] = keyReg1[n];
 800023c:	4a56      	ldr	r2, [pc, #344]	; (8000398 <get_key_input+0x164>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4955      	ldr	r1, [pc, #340]	; (800039c <get_key_input+0x168>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[n] = keyReg2[n];
 800024c:	4a54      	ldr	r2, [pc, #336]	; (80003a0 <get_key_input+0x16c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4950      	ldr	r1, [pc, #320]	; (8000398 <get_key_input+0x164>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// set up button n here
	switch(n){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d01d      	beq.n	800029e <get_key_input+0x6a>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b02      	cmp	r3, #2
 8000266:	dc24      	bgt.n	80002b2 <get_key_input+0x7e>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d003      	beq.n	8000276 <get_key_input+0x42>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d00a      	beq.n	800028a <get_key_input+0x56>
		break;
	case 2:
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
		break;
	default:
		break;
 8000274:	e01d      	b.n	80002b2 <get_key_input+0x7e>
		 keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	484a      	ldr	r0, [pc, #296]	; (80003a4 <get_key_input+0x170>)
 800027c:	f001 fd5a 	bl	8001d34 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	461a      	mov	r2, r3
 8000284:	4b46      	ldr	r3, [pc, #280]	; (80003a0 <get_key_input+0x16c>)
 8000286:	601a      	str	r2, [r3, #0]
		break;
 8000288:	e014      	b.n	80002b4 <get_key_input+0x80>
		 keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_TIME_GPIO_Port, BUTTON_TIME_Pin);
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	4845      	ldr	r0, [pc, #276]	; (80003a4 <get_key_input+0x170>)
 8000290:	f001 fd50 	bl	8001d34 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b41      	ldr	r3, [pc, #260]	; (80003a0 <get_key_input+0x16c>)
 800029a:	605a      	str	r2, [r3, #4]
		break;
 800029c:	e00a      	b.n	80002b4 <get_key_input+0x80>
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin);
 800029e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a2:	4840      	ldr	r0, [pc, #256]	; (80003a4 <get_key_input+0x170>)
 80002a4:	f001 fd46 	bl	8001d34 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b3c      	ldr	r3, [pc, #240]	; (80003a0 <get_key_input+0x16c>)
 80002ae:	609a      	str	r2, [r3, #8]
		break;
 80002b0:	e000      	b.n	80002b4 <get_key_input+0x80>
		break;
 80002b2:	bf00      	nop
	}
	/////////
	if((keyReg0[n] == keyReg1[n]) && (keyReg1[n] == keyReg2[n]) ){
 80002b4:	4a39      	ldr	r2, [pc, #228]	; (800039c <get_key_input+0x168>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002bc:	4936      	ldr	r1, [pc, #216]	; (8000398 <get_key_input+0x164>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d162      	bne.n	800038e <get_key_input+0x15a>
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <get_key_input+0x164>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d0:	4933      	ldr	r1, [pc, #204]	; (80003a0 <get_key_input+0x16c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d158      	bne.n	800038e <get_key_input+0x15a>
		if(keyReg2[n] != keyReg3[n]){
 80002dc:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <get_key_input+0x16c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e4:	4930      	ldr	r1, [pc, #192]	; (80003a8 <get_key_input+0x174>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d02c      	beq.n	800034a <get_key_input+0x116>
			keyReg3[n] = keyReg2[n];
 80002f0:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <get_key_input+0x16c>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f8:	492b      	ldr	r1, [pc, #172]	; (80003a8 <get_key_input+0x174>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[n] == NORMAL_STATE && en_pressed_once[n] == 1){
 8000300:	4a27      	ldr	r2, [pc, #156]	; (80003a0 <get_key_input+0x16c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d10d      	bne.n	8000328 <get_key_input+0xf4>
 800030c:	4a27      	ldr	r2, [pc, #156]	; (80003ac <get_key_input+0x178>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d107      	bne.n	8000328 <get_key_input+0xf4>
				//TODO when pressed once
				en_pressed_once[n] = 0;
 8000318:	4a24      	ldr	r2, [pc, #144]	; (80003ac <get_key_input+0x178>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2100      	movs	r1, #0
 800031e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				key_n_process_pressed_once(n);
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f7ff ff32 	bl	800018c <key_n_process_pressed_once>
			}
			if(keyReg2[n] == PRESSED_STATE){
 8000328:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <get_key_input+0x16c>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <get_key_input+0x10a>
				en_pressed_once[n] = 1;
 8000334:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <get_key_input+0x178>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2101      	movs	r1, #1
 800033a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			time_for_key_press[n] = 200;
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <get_key_input+0x17c>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	21c8      	movs	r1, #200	; 0xc8
 8000344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				time_for_key_press[n] = 200;
			}
		}
	}
}
 8000348:	e021      	b.n	800038e <get_key_input+0x15a>
			time_for_key_press[n]--;
 800034a:	4a19      	ldr	r2, [pc, #100]	; (80003b0 <get_key_input+0x17c>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4916      	ldr	r1, [pc, #88]	; (80003b0 <get_key_input+0x17c>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(time_for_key_press[n] == 0){
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <get_key_input+0x17c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d112      	bne.n	800038e <get_key_input+0x15a>
				if(keyReg2[n] == PRESSED_STATE){
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <get_key_input+0x16c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d107      	bne.n	8000384 <get_key_input+0x150>
					en_pressed_once[n] = 0;
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <get_key_input+0x178>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2100      	movs	r1, #0
 800037a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					key_n_process_pressed_hold(n);
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff14 	bl	80001ac <key_n_process_pressed_hold>
				time_for_key_press[n] = 200;
 8000384:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <get_key_input+0x17c>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	21c8      	movs	r1, #200	; 0xc8
 800038a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000000c 	.word	0x2000000c
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000018 	.word	0x20000018
 80003a4:	40010800 	.word	0x40010800
 80003a8:	20000024 	.word	0x20000024
 80003ac:	2000009c 	.word	0x2000009c
 80003b0:	20000030 	.word	0x20000030

080003b4 <get_key_input_all>:

void get_key_input_all(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0


	for(int i = 0; i < num_buttons ;i++){
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	e005      	b.n	80003cc <get_key_input_all+0x18>
		get_key_input(i);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff37 	bl	8000234 <get_key_input>
	for(int i = 0; i < num_buttons ;i++){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3301      	adds	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	ddf6      	ble.n	80003c0 <get_key_input_all+0xc>
	}
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <count_time>:
 *      Author: ASUS TUF GAMING
 */
#include "control_all.h"

int temp_change_time = 0;
void count_time(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <count_time+0x2c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d10d      	bne.n	8000404 <count_time+0x28>
		setTimer1(1000); //1s
 80003e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ec:	f001 f874 	bl	80014d8 <setTimer1>
		time_road1--;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <count_time+0x30>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	4a05      	ldr	r2, [pc, #20]	; (800040c <count_time+0x30>)
 80003f8:	6013      	str	r3, [r2, #0]
		time_road2--;
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <count_time+0x34>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	3b01      	subs	r3, #1
 8000400:	4a03      	ldr	r2, [pc, #12]	; (8000410 <count_time+0x34>)
 8000402:	6013      	str	r3, [r2, #0]
	}
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000c0 	.word	0x200000c0
 800040c:	200000b4 	.word	0x200000b4
 8000410:	200000b8 	.word	0x200000b8

08000414 <set_normal_mode>:
void set_normal_mode(){
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	state_lightTraffic = RED1_GREEN2;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <set_normal_mode+0x24>)
 800041a:	2201      	movs	r2, #1
 800041c:	601a      	str	r2, [r3, #0]
	time_road1 = time_red1;
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <set_normal_mode+0x28>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a07      	ldr	r2, [pc, #28]	; (8000440 <set_normal_mode+0x2c>)
 8000424:	6013      	str	r3, [r2, #0]
	time_road2 = time_green2;
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <set_normal_mode+0x30>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a07      	ldr	r2, [pc, #28]	; (8000448 <set_normal_mode+0x34>)
 800042c:	6013      	str	r3, [r2, #0]

}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000003c 	.word	0x2000003c
 800043c:	20000040 	.word	0x20000040
 8000440:	200000b4 	.word	0x200000b4
 8000444:	20000054 	.word	0x20000054
 8000448:	200000b8 	.word	0x200000b8

0800044c <set_red_mode>:
void set_red_mode(){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	reset_all_button();
 8000450:	f7ff fe7c 	bl	800014c <reset_all_button>
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045a:	4817      	ldr	r0, [pc, #92]	; (80004b8 <set_red_mode+0x6c>)
 800045c:	f001 fc81 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000466:	4814      	ldr	r0, [pc, #80]	; (80004b8 <set_red_mode+0x6c>)
 8000468:	f001 fc7b 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000472:	4811      	ldr	r0, [pc, #68]	; (80004b8 <set_red_mode+0x6c>)
 8000474:	f001 fc75 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <set_red_mode+0x70>)
 800047e:	f001 fc70 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <set_red_mode+0x70>)
 800048a:	f001 fc6a 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <set_red_mode+0x70>)
 8000496:	f001 fc64 	bl	8001d62 <HAL_GPIO_WritePin>
	temp_change_time = time_red1;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <set_red_mode+0x74>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <set_red_mode+0x78>)
 80004a0:	6013      	str	r3, [r2, #0]
	time_road1 = time_red1;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <set_red_mode+0x74>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <set_red_mode+0x7c>)
 80004a8:	6013      	str	r3, [r2, #0]
	time_road2 = temp_change_time;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <set_red_mode+0x78>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <set_red_mode+0x80>)
 80004b0:	6013      	str	r3, [r2, #0]
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	20000040 	.word	0x20000040
 80004c4:	200000a8 	.word	0x200000a8
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	200000b8 	.word	0x200000b8

080004d0 <set_yellow_mode>:
void set_yellow_mode(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4817      	ldr	r0, [pc, #92]	; (8000538 <set_yellow_mode+0x68>)
 80004dc:	f001 fc41 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e6:	4814      	ldr	r0, [pc, #80]	; (8000538 <set_yellow_mode+0x68>)
 80004e8:	f001 fc3b 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f2:	4811      	ldr	r0, [pc, #68]	; (8000538 <set_yellow_mode+0x68>)
 80004f4:	f001 fc35 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	480f      	ldr	r0, [pc, #60]	; (800053c <set_yellow_mode+0x6c>)
 80004fe:	f001 fc30 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <set_yellow_mode+0x6c>)
 800050a:	f001 fc2a 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <set_yellow_mode+0x6c>)
 8000516:	f001 fc24 	bl	8001d62 <HAL_GPIO_WritePin>
	temp_change_time = time_yellow1;
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <set_yellow_mode+0x70>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a09      	ldr	r2, [pc, #36]	; (8000544 <set_yellow_mode+0x74>)
 8000520:	6013      	str	r3, [r2, #0]
	time_road1 = time_yellow1;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <set_yellow_mode+0x70>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <set_yellow_mode+0x78>)
 8000528:	6013      	str	r3, [r2, #0]
	time_road2 = temp_change_time;
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <set_yellow_mode+0x74>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <set_yellow_mode+0x7c>)
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010800 	.word	0x40010800
 800053c:	40010c00 	.word	0x40010c00
 8000540:	20000044 	.word	0x20000044
 8000544:	200000a8 	.word	0x200000a8
 8000548:	200000b4 	.word	0x200000b4
 800054c:	200000b8 	.word	0x200000b8

08000550 <set_green_mode>:
void set_green_mode(){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	reset_all_button();
 8000554:	f7ff fdfa 	bl	800014c <reset_all_button>
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4817      	ldr	r0, [pc, #92]	; (80005bc <set_green_mode+0x6c>)
 8000560:	f001 fbff 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	4814      	ldr	r0, [pc, #80]	; (80005bc <set_green_mode+0x6c>)
 800056c:	f001 fbf9 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <set_green_mode+0x6c>)
 8000578:	f001 fbf3 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <set_green_mode+0x70>)
 8000582:	f001 fbee 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <set_green_mode+0x70>)
 800058e:	f001 fbe8 	bl	8001d62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <set_green_mode+0x70>)
 800059a:	f001 fbe2 	bl	8001d62 <HAL_GPIO_WritePin>
	temp_change_time = time_green1;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <set_green_mode+0x74>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <set_green_mode+0x78>)
 80005a4:	6013      	str	r3, [r2, #0]
	time_road1 = time_green1;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <set_green_mode+0x74>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <set_green_mode+0x7c>)
 80005ac:	6013      	str	r3, [r2, #0]
	time_road2 = temp_change_time;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <set_green_mode+0x78>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <set_green_mode+0x80>)
 80005b4:	6013      	str	r3, [r2, #0]
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	20000048 	.word	0x20000048
 80005c8:	200000a8 	.word	0x200000a8
 80005cc:	200000b4 	.word	0x200000b4
 80005d0:	200000b8 	.word	0x200000b8

080005d4 <blink_red>:

void blink_red(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <blink_red+0x58>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d123      	bne.n	8000628 <blink_red+0x54>
		setTimer3(250);//0.25s
 80005e0:	20fa      	movs	r0, #250	; 0xfa
 80005e2:	f000 ffad 	bl	8001540 <setTimer3>
		HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <blink_red+0x5c>)
 80005ec:	f001 fbd1 	bl	8001d92 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <blink_red+0x5c>)
 80005f8:	f001 fbb3 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <blink_red+0x5c>)
 8000604:	f001 fbad 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED2_RED_GPIO_Port, LED2_RED_Pin);
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <blink_red+0x60>)
 800060c:	f001 fbc1 	bl	8001d92 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <blink_red+0x60>)
 8000618:	f001 fba3 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <blink_red+0x60>)
 8000624:	f001 fb9d 	bl	8001d62 <HAL_GPIO_WritePin>
	}
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000d0 	.word	0x200000d0
 8000630:	40010800 	.word	0x40010800
 8000634:	40010c00 	.word	0x40010c00

08000638 <blink_yellow>:
void blink_yellow(){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <blink_yellow+0x58>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d123      	bne.n	800068c <blink_yellow+0x54>
		setTimer3(250);//0.25s
 8000644:	20fa      	movs	r0, #250	; 0xfa
 8000646:	f000 ff7b 	bl	8001540 <setTimer3>
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <blink_yellow+0x5c>)
 8000652:	f001 fb86 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin);
 8000656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <blink_yellow+0x5c>)
 800065c:	f001 fb99 	bl	8001d92 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <blink_yellow+0x5c>)
 8000668:	f001 fb7b 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <blink_yellow+0x60>)
 8000672:	f001 fb76 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin);
 8000676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <blink_yellow+0x60>)
 800067c:	f001 fb89 	bl	8001d92 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <blink_yellow+0x60>)
 8000688:	f001 fb6b 	bl	8001d62 <HAL_GPIO_WritePin>
	}
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000d0 	.word	0x200000d0
 8000694:	40010800 	.word	0x40010800
 8000698:	40010c00 	.word	0x40010c00

0800069c <blink_green>:
void blink_green(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <blink_green+0x58>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d123      	bne.n	80006f0 <blink_green+0x54>
		setTimer3(250);//0.25s
 80006a8:	20fa      	movs	r0, #250	; 0xfa
 80006aa:	f000 ff49 	bl	8001540 <setTimer3>
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <blink_green+0x5c>)
 80006b6:	f001 fb54 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <blink_green+0x5c>)
 80006c2:	f001 fb4e 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <blink_green+0x5c>)
 80006cc:	f001 fb61 	bl	8001d92 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <blink_green+0x60>)
 80006d6:	f001 fb44 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <blink_green+0x60>)
 80006e2:	f001 fb3e 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 80006e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <blink_green+0x60>)
 80006ec:	f001 fb51 	bl	8001d92 <HAL_GPIO_TogglePin>
	}
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000d0 	.word	0x200000d0
 80006f8:	40010800 	.word	0x40010800
 80006fc:	40010c00 	.word	0x40010c00

08000700 <increase_temp_time>:

void increase_temp_time(){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	temp_change_time++;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <increase_temp_time+0x2c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <increase_temp_time+0x2c>)
 800070c:	6013      	str	r3, [r2, #0]
	if(temp_change_time >= 100){
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <increase_temp_time+0x2c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b63      	cmp	r3, #99	; 0x63
 8000714:	dd02      	ble.n	800071c <increase_temp_time+0x1c>
		temp_change_time = 1;
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <increase_temp_time+0x2c>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
	}
	time_road2 = temp_change_time;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <increase_temp_time+0x2c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a03      	ldr	r2, [pc, #12]	; (8000730 <increase_temp_time+0x30>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	200000a8 	.word	0x200000a8
 8000730:	200000b8 	.word	0x200000b8

08000734 <control_all>:

void control_all(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	switch(status){
 8000738:	4b84      	ldr	r3, [pc, #528]	; (800094c <control_all+0x218>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b04      	cmp	r3, #4
 800073e:	f200 80fa 	bhi.w	8000936 <control_all+0x202>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <control_all+0x14>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	0800075d 	.word	0x0800075d
 800074c:	08000777 	.word	0x08000777
 8000750:	080007b5 	.word	0x080007b5
 8000754:	08000857 	.word	0x08000857
 8000758:	080008fd 	.word	0x080008fd
	case INIT:
		status = NORMAL_MODE;
 800075c:	4b7b      	ldr	r3, [pc, #492]	; (800094c <control_all+0x218>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
		setTimer1(1000);//1s
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 feb7 	bl	80014d8 <setTimer1>
		setTimer2(250);
 800076a:	20fa      	movs	r0, #250	; 0xfa
 800076c:	f000 fece 	bl	800150c <setTimer2>
		set_normal_mode();
 8000770:	f7ff fe50 	bl	8000414 <set_normal_mode>
		break;
 8000774:	e0e8      	b.n	8000948 <control_all+0x214>
	case NORMAL_MODE:
		count_time();
 8000776:	f7ff fe31 	bl	80003dc <count_time>
		control_lightTraffic();
 800077a:	f000 fc89 	bl	8001090 <control_lightTraffic>
		control_led7seg();
 800077e:	f000 fc17 	bl	8000fb0 <control_led7seg>
		//change mode
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fd22 	bl	80001cc <is_button_pressed_once>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <control_all+0x68>
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fd36 	bl	8000200 <is_button_pressed_hold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	f000 80cf 	beq.w	800093a <control_all+0x206>
			status = SET_RED_MODE;
 800079c:	4b6b      	ldr	r3, [pc, #428]	; (800094c <control_all+0x218>)
 800079e:	2202      	movs	r2, #2
 80007a0:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 80007a2:	20fa      	movs	r0, #250	; 0xfa
 80007a4:	f000 feb2 	bl	800150c <setTimer2>
			setTimer3(250);//0.25s
 80007a8:	20fa      	movs	r0, #250	; 0xfa
 80007aa:	f000 fec9 	bl	8001540 <setTimer3>
			set_red_mode();
 80007ae:	f7ff fe4d 	bl	800044c <set_red_mode>
		}
		break;
 80007b2:	e0c2      	b.n	800093a <control_all+0x206>
	case SET_RED_MODE:
		control_led7seg();
 80007b4:	f000 fbfc 	bl	8000fb0 <control_led7seg>
		blink_red();
 80007b8:	f7ff ff0c 	bl	80005d4 <blink_red>
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fd05 	bl	80001cc <is_button_pressed_once>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <control_all+0xa0>
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fd19 	bl	8000200 <is_button_pressed_hold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00a      	beq.n	80007ea <control_all+0xb6>
			status = SET_YELLOW_MODE;
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <control_all+0x218>)
 80007d6:	2203      	movs	r2, #3
 80007d8:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 80007da:	20fa      	movs	r0, #250	; 0xfa
 80007dc:	f000 fe96 	bl	800150c <setTimer2>
			setTimer3(250);//0.25s
 80007e0:	20fa      	movs	r0, #250	; 0xfa
 80007e2:	f000 fead 	bl	8001540 <setTimer3>
			set_yellow_mode();
 80007e6:	f7ff fe73 	bl	80004d0 <set_yellow_mode>
		}
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fcee 	bl	80001cc <is_button_pressed_once>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d105      	bne.n	8000802 <control_all+0xce>
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fd02 	bl	8000200 <is_button_pressed_hold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <control_all+0xd2>
			increase_temp_time();
 8000802:	f7ff ff7d 	bl	8000700 <increase_temp_time>
		}
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff fce0 	bl	80001cc <is_button_pressed_once>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d106      	bne.n	8000820 <control_all+0xec>
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff fcf4 	bl	8000200 <is_button_pressed_hold>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	f000 808f 	beq.w	800093e <control_all+0x20a>
			time_red1 = temp_change_time;
 8000820:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <control_all+0x21c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a4b      	ldr	r2, [pc, #300]	; (8000954 <control_all+0x220>)
 8000826:	6013      	str	r3, [r2, #0]
			time_green2 = time_red1 - time_yellow2;
 8000828:	4b4a      	ldr	r3, [pc, #296]	; (8000954 <control_all+0x220>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b4a      	ldr	r3, [pc, #296]	; (8000958 <control_all+0x224>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	4a4a      	ldr	r2, [pc, #296]	; (800095c <control_all+0x228>)
 8000834:	6013      	str	r3, [r2, #0]
			if(time_green2 < 0 ){
 8000836:	4b49      	ldr	r3, [pc, #292]	; (800095c <control_all+0x228>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da06      	bge.n	800084c <control_all+0x118>
				time_green2 = 0;
 800083e:	4b47      	ldr	r3, [pc, #284]	; (800095c <control_all+0x228>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
				time_yellow2 = time_red1;
 8000844:	4b43      	ldr	r3, [pc, #268]	; (8000954 <control_all+0x220>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a43      	ldr	r2, [pc, #268]	; (8000958 <control_all+0x224>)
 800084a:	6013      	str	r3, [r2, #0]
			}
			time_road1 = time_red1;
 800084c:	4b41      	ldr	r3, [pc, #260]	; (8000954 <control_all+0x220>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a43      	ldr	r2, [pc, #268]	; (8000960 <control_all+0x22c>)
 8000852:	6013      	str	r3, [r2, #0]
		}
		break;
 8000854:	e073      	b.n	800093e <control_all+0x20a>
	case SET_YELLOW_MODE:
		control_led7seg();
 8000856:	f000 fbab 	bl	8000fb0 <control_led7seg>
		blink_yellow();
 800085a:	f7ff feed 	bl	8000638 <blink_yellow>
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fcb4 	bl	80001cc <is_button_pressed_once>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d105      	bne.n	8000876 <control_all+0x142>
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fcc8 	bl	8000200 <is_button_pressed_hold>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00a      	beq.n	800088c <control_all+0x158>
			status = SET_GREEN_MODE;
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <control_all+0x218>)
 8000878:	2204      	movs	r2, #4
 800087a:	601a      	str	r2, [r3, #0]
			setTimer2(250);
 800087c:	20fa      	movs	r0, #250	; 0xfa
 800087e:	f000 fe45 	bl	800150c <setTimer2>
			setTimer3(250);//0.25s
 8000882:	20fa      	movs	r0, #250	; 0xfa
 8000884:	f000 fe5c 	bl	8001540 <setTimer3>
			set_green_mode();
 8000888:	f7ff fe62 	bl	8000550 <set_green_mode>
		}
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fc9d 	bl	80001cc <is_button_pressed_once>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d105      	bne.n	80008a4 <control_all+0x170>
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fcb1 	bl	8000200 <is_button_pressed_hold>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <control_all+0x174>
			increase_temp_time();
 80008a4:	f7ff ff2c 	bl	8000700 <increase_temp_time>
		}
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fc8f 	bl	80001cc <is_button_pressed_once>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d105      	bne.n	80008c0 <control_all+0x18c>
 80008b4:	2002      	movs	r0, #2
 80008b6:	f7ff fca3 	bl	8000200 <is_button_pressed_hold>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d040      	beq.n	8000942 <control_all+0x20e>
			time_yellow1 = temp_change_time;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <control_all+0x21c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <control_all+0x230>)
 80008c6:	6013      	str	r3, [r2, #0]
			time_red2 = time_green1 + time_yellow1;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <control_all+0x234>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <control_all+0x230>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a26      	ldr	r2, [pc, #152]	; (800096c <control_all+0x238>)
 80008d4:	6013      	str	r3, [r2, #0]
			if(time_red2 >= 100 ){
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <control_all+0x238>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b63      	cmp	r3, #99	; 0x63
 80008dc:	dd09      	ble.n	80008f2 <control_all+0x1be>
				time_red2 = 99;
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <control_all+0x238>)
 80008e0:	2263      	movs	r2, #99	; 0x63
 80008e2:	601a      	str	r2, [r3, #0]
				time_green1 = time_red2 - time_yellow1;
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <control_all+0x238>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <control_all+0x230>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <control_all+0x234>)
 80008f0:	6013      	str	r3, [r2, #0]
			}
			time_road1 = time_yellow1;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <control_all+0x230>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <control_all+0x22c>)
 80008f8:	6013      	str	r3, [r2, #0]
		}
		break;
 80008fa:	e022      	b.n	8000942 <control_all+0x20e>
	case SET_GREEN_MODE:
		control_led7seg();
 80008fc:	f000 fb58 	bl	8000fb0 <control_led7seg>
		blink_green();
 8000900:	f7ff fecc 	bl	800069c <blink_green>
		if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fc61 	bl	80001cc <is_button_pressed_once>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d105      	bne.n	800091c <control_all+0x1e8>
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fc75 	bl	8000200 <is_button_pressed_hold>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d014      	beq.n	8000946 <control_all+0x212>
			status = NORMAL_MODE;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <control_all+0x218>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f000 fdd7 	bl	80014d8 <setTimer1>
			setTimer2(250);
 800092a:	20fa      	movs	r0, #250	; 0xfa
 800092c:	f000 fdee 	bl	800150c <setTimer2>
			set_normal_mode();
 8000930:	f7ff fd70 	bl	8000414 <set_normal_mode>
		}
		break;
 8000934:	e007      	b.n	8000946 <control_all+0x212>
	default:
		break;
 8000936:	bf00      	nop
 8000938:	e006      	b.n	8000948 <control_all+0x214>
		break;
 800093a:	bf00      	nop
 800093c:	e004      	b.n	8000948 <control_all+0x214>
		break;
 800093e:	bf00      	nop
 8000940:	e002      	b.n	8000948 <control_all+0x214>
		break;
 8000942:	bf00      	nop
 8000944:	e000      	b.n	8000948 <control_all+0x214>
		break;
 8000946:	bf00      	nop
	}
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000b0 	.word	0x200000b0
 8000950:	200000a8 	.word	0x200000a8
 8000954:	20000040 	.word	0x20000040
 8000958:	20000050 	.word	0x20000050
 800095c:	20000054 	.word	0x20000054
 8000960:	200000b4 	.word	0x200000b4
 8000964:	20000044 	.word	0x20000044
 8000968:	20000048 	.word	0x20000048
 800096c:	2000004c 	.word	0x2000004c

08000970 <display7SEG1>:
 *  Created on: Oct 28, 2023
 *      Author: ASUS TUF GAMING
 */
#include "control_led7seg.h"

  void display7SEG1(int state){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b09      	cmp	r3, #9
 800097c:	f200 8180 	bhi.w	8000c80 <display7SEG1+0x310>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <display7SEG1+0x18>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009f9 	.word	0x080009f9
 8000990:	08000a41 	.word	0x08000a41
 8000994:	08000a89 	.word	0x08000a89
 8000998:	08000ad1 	.word	0x08000ad1
 800099c:	08000b19 	.word	0x08000b19
 80009a0:	08000b61 	.word	0x08000b61
 80009a4:	08000ba9 	.word	0x08000ba9
 80009a8:	08000bf1 	.word	0x08000bf1
 80009ac:	08000c39 	.word	0x08000c39
	  switch(state){
	  case 0:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2102      	movs	r1, #2
 80009b4:	48b5      	ldr	r0, [pc, #724]	; (8000c8c <display7SEG1+0x31c>)
 80009b6:	f001 f9d4 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2104      	movs	r1, #4
 80009be:	48b3      	ldr	r0, [pc, #716]	; (8000c8c <display7SEG1+0x31c>)
 80009c0:	f001 f9cf 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2108      	movs	r1, #8
 80009c8:	48b0      	ldr	r0, [pc, #704]	; (8000c8c <display7SEG1+0x31c>)
 80009ca:	f001 f9ca 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2110      	movs	r1, #16
 80009d2:	48ae      	ldr	r0, [pc, #696]	; (8000c8c <display7SEG1+0x31c>)
 80009d4:	f001 f9c5 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	48ab      	ldr	r0, [pc, #684]	; (8000c8c <display7SEG1+0x31c>)
 80009de:	f001 f9c0 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	48a9      	ldr	r0, [pc, #676]	; (8000c8c <display7SEG1+0x31c>)
 80009e8:	f001 f9bb 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	48a6      	ldr	r0, [pc, #664]	; (8000c8c <display7SEG1+0x31c>)
 80009f2:	f001 f9b6 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 80009f6:	e144      	b.n	8000c82 <display7SEG1+0x312>
	  case 1:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2102      	movs	r1, #2
 80009fc:	48a3      	ldr	r0, [pc, #652]	; (8000c8c <display7SEG1+0x31c>)
 80009fe:	f001 f9b0 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2104      	movs	r1, #4
 8000a06:	48a1      	ldr	r0, [pc, #644]	; (8000c8c <display7SEG1+0x31c>)
 8000a08:	f001 f9ab 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2108      	movs	r1, #8
 8000a10:	489e      	ldr	r0, [pc, #632]	; (8000c8c <display7SEG1+0x31c>)
 8000a12:	f001 f9a6 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2110      	movs	r1, #16
 8000a1a:	489c      	ldr	r0, [pc, #624]	; (8000c8c <display7SEG1+0x31c>)
 8000a1c:	f001 f9a1 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2120      	movs	r1, #32
 8000a24:	4899      	ldr	r0, [pc, #612]	; (8000c8c <display7SEG1+0x31c>)
 8000a26:	f001 f99c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	4897      	ldr	r0, [pc, #604]	; (8000c8c <display7SEG1+0x31c>)
 8000a30:	f001 f997 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	4894      	ldr	r0, [pc, #592]	; (8000c8c <display7SEG1+0x31c>)
 8000a3a:	f001 f992 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000a3e:	e120      	b.n	8000c82 <display7SEG1+0x312>
	  case 2:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4891      	ldr	r0, [pc, #580]	; (8000c8c <display7SEG1+0x31c>)
 8000a46:	f001 f98c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	488f      	ldr	r0, [pc, #572]	; (8000c8c <display7SEG1+0x31c>)
 8000a50:	f001 f987 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2108      	movs	r1, #8
 8000a58:	488c      	ldr	r0, [pc, #560]	; (8000c8c <display7SEG1+0x31c>)
 8000a5a:	f001 f982 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2110      	movs	r1, #16
 8000a62:	488a      	ldr	r0, [pc, #552]	; (8000c8c <display7SEG1+0x31c>)
 8000a64:	f001 f97d 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	4887      	ldr	r0, [pc, #540]	; (8000c8c <display7SEG1+0x31c>)
 8000a6e:	f001 f978 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	4885      	ldr	r0, [pc, #532]	; (8000c8c <display7SEG1+0x31c>)
 8000a78:	f001 f973 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	4882      	ldr	r0, [pc, #520]	; (8000c8c <display7SEG1+0x31c>)
 8000a82:	f001 f96e 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000a86:	e0fc      	b.n	8000c82 <display7SEG1+0x312>
	  case 3:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	487f      	ldr	r0, [pc, #508]	; (8000c8c <display7SEG1+0x31c>)
 8000a8e:	f001 f968 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2104      	movs	r1, #4
 8000a96:	487d      	ldr	r0, [pc, #500]	; (8000c8c <display7SEG1+0x31c>)
 8000a98:	f001 f963 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	487a      	ldr	r0, [pc, #488]	; (8000c8c <display7SEG1+0x31c>)
 8000aa2:	f001 f95e 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4878      	ldr	r0, [pc, #480]	; (8000c8c <display7SEG1+0x31c>)
 8000aac:	f001 f959 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4875      	ldr	r0, [pc, #468]	; (8000c8c <display7SEG1+0x31c>)
 8000ab6:	f001 f954 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	4873      	ldr	r0, [pc, #460]	; (8000c8c <display7SEG1+0x31c>)
 8000ac0:	f001 f94f 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	4870      	ldr	r0, [pc, #448]	; (8000c8c <display7SEG1+0x31c>)
 8000aca:	f001 f94a 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000ace:	e0d8      	b.n	8000c82 <display7SEG1+0x312>
	  case 4:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	486d      	ldr	r0, [pc, #436]	; (8000c8c <display7SEG1+0x31c>)
 8000ad6:	f001 f944 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	486b      	ldr	r0, [pc, #428]	; (8000c8c <display7SEG1+0x31c>)
 8000ae0:	f001 f93f 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4868      	ldr	r0, [pc, #416]	; (8000c8c <display7SEG1+0x31c>)
 8000aea:	f001 f93a 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	4866      	ldr	r0, [pc, #408]	; (8000c8c <display7SEG1+0x31c>)
 8000af4:	f001 f935 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2120      	movs	r1, #32
 8000afc:	4863      	ldr	r0, [pc, #396]	; (8000c8c <display7SEG1+0x31c>)
 8000afe:	f001 f930 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	4861      	ldr	r0, [pc, #388]	; (8000c8c <display7SEG1+0x31c>)
 8000b08:	f001 f92b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	485e      	ldr	r0, [pc, #376]	; (8000c8c <display7SEG1+0x31c>)
 8000b12:	f001 f926 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000b16:	e0b4      	b.n	8000c82 <display7SEG1+0x312>
	  case 5:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	485b      	ldr	r0, [pc, #364]	; (8000c8c <display7SEG1+0x31c>)
 8000b1e:	f001 f920 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	4859      	ldr	r0, [pc, #356]	; (8000c8c <display7SEG1+0x31c>)
 8000b28:	f001 f91b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4856      	ldr	r0, [pc, #344]	; (8000c8c <display7SEG1+0x31c>)
 8000b32:	f001 f916 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4854      	ldr	r0, [pc, #336]	; (8000c8c <display7SEG1+0x31c>)
 8000b3c:	f001 f911 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2120      	movs	r1, #32
 8000b44:	4851      	ldr	r0, [pc, #324]	; (8000c8c <display7SEG1+0x31c>)
 8000b46:	f001 f90c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	484f      	ldr	r0, [pc, #316]	; (8000c8c <display7SEG1+0x31c>)
 8000b50:	f001 f907 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	484c      	ldr	r0, [pc, #304]	; (8000c8c <display7SEG1+0x31c>)
 8000b5a:	f001 f902 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000b5e:	e090      	b.n	8000c82 <display7SEG1+0x312>
	  case 6:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4849      	ldr	r0, [pc, #292]	; (8000c8c <display7SEG1+0x31c>)
 8000b66:	f001 f8fc 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4847      	ldr	r0, [pc, #284]	; (8000c8c <display7SEG1+0x31c>)
 8000b70:	f001 f8f7 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	4844      	ldr	r0, [pc, #272]	; (8000c8c <display7SEG1+0x31c>)
 8000b7a:	f001 f8f2 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2110      	movs	r1, #16
 8000b82:	4842      	ldr	r0, [pc, #264]	; (8000c8c <display7SEG1+0x31c>)
 8000b84:	f001 f8ed 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	483f      	ldr	r0, [pc, #252]	; (8000c8c <display7SEG1+0x31c>)
 8000b8e:	f001 f8e8 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	483d      	ldr	r0, [pc, #244]	; (8000c8c <display7SEG1+0x31c>)
 8000b98:	f001 f8e3 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	483a      	ldr	r0, [pc, #232]	; (8000c8c <display7SEG1+0x31c>)
 8000ba2:	f001 f8de 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000ba6:	e06c      	b.n	8000c82 <display7SEG1+0x312>
	  case 7:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2102      	movs	r1, #2
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <display7SEG1+0x31c>)
 8000bae:	f001 f8d8 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4835      	ldr	r0, [pc, #212]	; (8000c8c <display7SEG1+0x31c>)
 8000bb8:	f001 f8d3 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4832      	ldr	r0, [pc, #200]	; (8000c8c <display7SEG1+0x31c>)
 8000bc2:	f001 f8ce 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2110      	movs	r1, #16
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <display7SEG1+0x31c>)
 8000bcc:	f001 f8c9 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	482d      	ldr	r0, [pc, #180]	; (8000c8c <display7SEG1+0x31c>)
 8000bd6:	f001 f8c4 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	482b      	ldr	r0, [pc, #172]	; (8000c8c <display7SEG1+0x31c>)
 8000be0:	f001 f8bf 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	4828      	ldr	r0, [pc, #160]	; (8000c8c <display7SEG1+0x31c>)
 8000bea:	f001 f8ba 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000bee:	e048      	b.n	8000c82 <display7SEG1+0x312>
	  case 8:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4825      	ldr	r0, [pc, #148]	; (8000c8c <display7SEG1+0x31c>)
 8000bf6:	f001 f8b4 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	4823      	ldr	r0, [pc, #140]	; (8000c8c <display7SEG1+0x31c>)
 8000c00:	f001 f8af 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2108      	movs	r1, #8
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <display7SEG1+0x31c>)
 8000c0a:	f001 f8aa 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2110      	movs	r1, #16
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <display7SEG1+0x31c>)
 8000c14:	f001 f8a5 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	481b      	ldr	r0, [pc, #108]	; (8000c8c <display7SEG1+0x31c>)
 8000c1e:	f001 f8a0 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	4819      	ldr	r0, [pc, #100]	; (8000c8c <display7SEG1+0x31c>)
 8000c28:	f001 f89b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <display7SEG1+0x31c>)
 8000c32:	f001 f896 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000c36:	e024      	b.n	8000c82 <display7SEG1+0x312>
	  case 9:
		  HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4813      	ldr	r0, [pc, #76]	; (8000c8c <display7SEG1+0x31c>)
 8000c3e:	f001 f890 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2104      	movs	r1, #4
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <display7SEG1+0x31c>)
 8000c48:	f001 f88b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2108      	movs	r1, #8
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <display7SEG1+0x31c>)
 8000c52:	f001 f886 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <display7SEG1+0x31c>)
 8000c5c:	f001 f881 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <display7SEG1+0x31c>)
 8000c66:	f001 f87c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <display7SEG1+0x31c>)
 8000c70:	f001 f877 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <display7SEG1+0x31c>)
 8000c7a:	f001 f872 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000c7e:	e000      	b.n	8000c82 <display7SEG1+0x312>
	  default:
	  		  break;
 8000c80:	bf00      	nop
	  }
  }
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010800 	.word	0x40010800

08000c90 <display7SEG2>:
  void display7SEG2(int state){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b09      	cmp	r3, #9
 8000c9c:	f200 8180 	bhi.w	8000fa0 <display7SEG2+0x310>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <display7SEG2+0x18>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	08000d19 	.word	0x08000d19
 8000cb0:	08000d61 	.word	0x08000d61
 8000cb4:	08000da9 	.word	0x08000da9
 8000cb8:	08000df1 	.word	0x08000df1
 8000cbc:	08000e39 	.word	0x08000e39
 8000cc0:	08000e81 	.word	0x08000e81
 8000cc4:	08000ec9 	.word	0x08000ec9
 8000cc8:	08000f11 	.word	0x08000f11
 8000ccc:	08000f59 	.word	0x08000f59
	  switch(state){
	  case 0:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	48b5      	ldr	r0, [pc, #724]	; (8000fac <display7SEG2+0x31c>)
 8000cd6:	f001 f844 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	48b3      	ldr	r0, [pc, #716]	; (8000fac <display7SEG2+0x31c>)
 8000ce0:	f001 f83f 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	48b0      	ldr	r0, [pc, #704]	; (8000fac <display7SEG2+0x31c>)
 8000cea:	f001 f83a 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	48ae      	ldr	r0, [pc, #696]	; (8000fac <display7SEG2+0x31c>)
 8000cf4:	f001 f835 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	48ab      	ldr	r0, [pc, #684]	; (8000fac <display7SEG2+0x31c>)
 8000cfe:	f001 f830 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	48a9      	ldr	r0, [pc, #676]	; (8000fac <display7SEG2+0x31c>)
 8000d08:	f001 f82b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	48a6      	ldr	r0, [pc, #664]	; (8000fac <display7SEG2+0x31c>)
 8000d12:	f001 f826 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000d16:	e144      	b.n	8000fa2 <display7SEG2+0x312>
	  case 1:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	48a3      	ldr	r0, [pc, #652]	; (8000fac <display7SEG2+0x31c>)
 8000d1e:	f001 f820 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2102      	movs	r1, #2
 8000d26:	48a1      	ldr	r0, [pc, #644]	; (8000fac <display7SEG2+0x31c>)
 8000d28:	f001 f81b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2104      	movs	r1, #4
 8000d30:	489e      	ldr	r0, [pc, #632]	; (8000fac <display7SEG2+0x31c>)
 8000d32:	f001 f816 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2108      	movs	r1, #8
 8000d3a:	489c      	ldr	r0, [pc, #624]	; (8000fac <display7SEG2+0x31c>)
 8000d3c:	f001 f811 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	4899      	ldr	r0, [pc, #612]	; (8000fac <display7SEG2+0x31c>)
 8000d46:	f001 f80c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	4897      	ldr	r0, [pc, #604]	; (8000fac <display7SEG2+0x31c>)
 8000d50:	f001 f807 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	4894      	ldr	r0, [pc, #592]	; (8000fac <display7SEG2+0x31c>)
 8000d5a:	f001 f802 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000d5e:	e120      	b.n	8000fa2 <display7SEG2+0x312>
	  case 2:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4891      	ldr	r0, [pc, #580]	; (8000fac <display7SEG2+0x31c>)
 8000d66:	f000 fffc 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	488f      	ldr	r0, [pc, #572]	; (8000fac <display7SEG2+0x31c>)
 8000d70:	f000 fff7 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	488c      	ldr	r0, [pc, #560]	; (8000fac <display7SEG2+0x31c>)
 8000d7a:	f000 fff2 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	488a      	ldr	r0, [pc, #552]	; (8000fac <display7SEG2+0x31c>)
 8000d84:	f000 ffed 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4887      	ldr	r0, [pc, #540]	; (8000fac <display7SEG2+0x31c>)
 8000d8e:	f000 ffe8 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2120      	movs	r1, #32
 8000d96:	4885      	ldr	r0, [pc, #532]	; (8000fac <display7SEG2+0x31c>)
 8000d98:	f000 ffe3 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4882      	ldr	r0, [pc, #520]	; (8000fac <display7SEG2+0x31c>)
 8000da2:	f000 ffde 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000da6:	e0fc      	b.n	8000fa2 <display7SEG2+0x312>
	  case 3:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2101      	movs	r1, #1
 8000dac:	487f      	ldr	r0, [pc, #508]	; (8000fac <display7SEG2+0x31c>)
 8000dae:	f000 ffd8 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2102      	movs	r1, #2
 8000db6:	487d      	ldr	r0, [pc, #500]	; (8000fac <display7SEG2+0x31c>)
 8000db8:	f000 ffd3 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	487a      	ldr	r0, [pc, #488]	; (8000fac <display7SEG2+0x31c>)
 8000dc2:	f000 ffce 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4878      	ldr	r0, [pc, #480]	; (8000fac <display7SEG2+0x31c>)
 8000dcc:	f000 ffc9 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	4875      	ldr	r0, [pc, #468]	; (8000fac <display7SEG2+0x31c>)
 8000dd6:	f000 ffc4 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2120      	movs	r1, #32
 8000dde:	4873      	ldr	r0, [pc, #460]	; (8000fac <display7SEG2+0x31c>)
 8000de0:	f000 ffbf 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4870      	ldr	r0, [pc, #448]	; (8000fac <display7SEG2+0x31c>)
 8000dea:	f000 ffba 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000dee:	e0d8      	b.n	8000fa2 <display7SEG2+0x312>
	  case 4:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2101      	movs	r1, #1
 8000df4:	486d      	ldr	r0, [pc, #436]	; (8000fac <display7SEG2+0x31c>)
 8000df6:	f000 ffb4 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	486b      	ldr	r0, [pc, #428]	; (8000fac <display7SEG2+0x31c>)
 8000e00:	f000 ffaf 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2104      	movs	r1, #4
 8000e08:	4868      	ldr	r0, [pc, #416]	; (8000fac <display7SEG2+0x31c>)
 8000e0a:	f000 ffaa 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4866      	ldr	r0, [pc, #408]	; (8000fac <display7SEG2+0x31c>)
 8000e14:	f000 ffa5 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4863      	ldr	r0, [pc, #396]	; (8000fac <display7SEG2+0x31c>)
 8000e1e:	f000 ffa0 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2120      	movs	r1, #32
 8000e26:	4861      	ldr	r0, [pc, #388]	; (8000fac <display7SEG2+0x31c>)
 8000e28:	f000 ff9b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	485e      	ldr	r0, [pc, #376]	; (8000fac <display7SEG2+0x31c>)
 8000e32:	f000 ff96 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000e36:	e0b4      	b.n	8000fa2 <display7SEG2+0x312>
	  case 5:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	485b      	ldr	r0, [pc, #364]	; (8000fac <display7SEG2+0x31c>)
 8000e3e:	f000 ff90 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2102      	movs	r1, #2
 8000e46:	4859      	ldr	r0, [pc, #356]	; (8000fac <display7SEG2+0x31c>)
 8000e48:	f000 ff8b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4856      	ldr	r0, [pc, #344]	; (8000fac <display7SEG2+0x31c>)
 8000e52:	f000 ff86 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4854      	ldr	r0, [pc, #336]	; (8000fac <display7SEG2+0x31c>)
 8000e5c:	f000 ff81 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4851      	ldr	r0, [pc, #324]	; (8000fac <display7SEG2+0x31c>)
 8000e66:	f000 ff7c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	484f      	ldr	r0, [pc, #316]	; (8000fac <display7SEG2+0x31c>)
 8000e70:	f000 ff77 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	484c      	ldr	r0, [pc, #304]	; (8000fac <display7SEG2+0x31c>)
 8000e7a:	f000 ff72 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000e7e:	e090      	b.n	8000fa2 <display7SEG2+0x312>
	  case 6:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	4849      	ldr	r0, [pc, #292]	; (8000fac <display7SEG2+0x31c>)
 8000e86:	f000 ff6c 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4847      	ldr	r0, [pc, #284]	; (8000fac <display7SEG2+0x31c>)
 8000e90:	f000 ff67 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2104      	movs	r1, #4
 8000e98:	4844      	ldr	r0, [pc, #272]	; (8000fac <display7SEG2+0x31c>)
 8000e9a:	f000 ff62 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	4842      	ldr	r0, [pc, #264]	; (8000fac <display7SEG2+0x31c>)
 8000ea4:	f000 ff5d 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	483f      	ldr	r0, [pc, #252]	; (8000fac <display7SEG2+0x31c>)
 8000eae:	f000 ff58 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	483d      	ldr	r0, [pc, #244]	; (8000fac <display7SEG2+0x31c>)
 8000eb8:	f000 ff53 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2140      	movs	r1, #64	; 0x40
 8000ec0:	483a      	ldr	r0, [pc, #232]	; (8000fac <display7SEG2+0x31c>)
 8000ec2:	f000 ff4e 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000ec6:	e06c      	b.n	8000fa2 <display7SEG2+0x312>
	  case 7:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4837      	ldr	r0, [pc, #220]	; (8000fac <display7SEG2+0x31c>)
 8000ece:	f000 ff48 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4835      	ldr	r0, [pc, #212]	; (8000fac <display7SEG2+0x31c>)
 8000ed8:	f000 ff43 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4832      	ldr	r0, [pc, #200]	; (8000fac <display7SEG2+0x31c>)
 8000ee2:	f000 ff3e 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4830      	ldr	r0, [pc, #192]	; (8000fac <display7SEG2+0x31c>)
 8000eec:	f000 ff39 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	482d      	ldr	r0, [pc, #180]	; (8000fac <display7SEG2+0x31c>)
 8000ef6:	f000 ff34 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2120      	movs	r1, #32
 8000efe:	482b      	ldr	r0, [pc, #172]	; (8000fac <display7SEG2+0x31c>)
 8000f00:	f000 ff2f 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	4828      	ldr	r0, [pc, #160]	; (8000fac <display7SEG2+0x31c>)
 8000f0a:	f000 ff2a 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000f0e:	e048      	b.n	8000fa2 <display7SEG2+0x312>
	  case 8:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2101      	movs	r1, #1
 8000f14:	4825      	ldr	r0, [pc, #148]	; (8000fac <display7SEG2+0x31c>)
 8000f16:	f000 ff24 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <display7SEG2+0x31c>)
 8000f20:	f000 ff1f 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2104      	movs	r1, #4
 8000f28:	4820      	ldr	r0, [pc, #128]	; (8000fac <display7SEG2+0x31c>)
 8000f2a:	f000 ff1a 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2108      	movs	r1, #8
 8000f32:	481e      	ldr	r0, [pc, #120]	; (8000fac <display7SEG2+0x31c>)
 8000f34:	f000 ff15 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	481b      	ldr	r0, [pc, #108]	; (8000fac <display7SEG2+0x31c>)
 8000f3e:	f000 ff10 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	4819      	ldr	r0, [pc, #100]	; (8000fac <display7SEG2+0x31c>)
 8000f48:	f000 ff0b 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	4816      	ldr	r0, [pc, #88]	; (8000fac <display7SEG2+0x31c>)
 8000f52:	f000 ff06 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000f56:	e024      	b.n	8000fa2 <display7SEG2+0x312>
	  case 9:
		  HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <display7SEG2+0x31c>)
 8000f5e:	f000 ff00 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <display7SEG2+0x31c>)
 8000f68:	f000 fefb 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2104      	movs	r1, #4
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <display7SEG2+0x31c>)
 8000f72:	f000 fef6 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2108      	movs	r1, #8
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <display7SEG2+0x31c>)
 8000f7c:	f000 fef1 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2110      	movs	r1, #16
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <display7SEG2+0x31c>)
 8000f86:	f000 feec 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <display7SEG2+0x31c>)
 8000f90:	f000 fee7 	bl	8001d62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2140      	movs	r1, #64	; 0x40
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <display7SEG2+0x31c>)
 8000f9a:	f000 fee2 	bl	8001d62 <HAL_GPIO_WritePin>
		  break;
 8000f9e:	e000      	b.n	8000fa2 <display7SEG2+0x312>
	  default:
	  		  break;
 8000fa0:	bf00      	nop
	  }
  }
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <control_led7seg>:

int enable_seg = 0;
void control_led7seg(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <control_led7seg+0xc8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d15b      	bne.n	8001074 <control_led7seg+0xc4>
		enable_seg = 1 - enable_seg;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <control_led7seg+0xcc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1c3 0301 	rsb	r3, r3, #1
 8000fc4:	4a2d      	ldr	r2, [pc, #180]	; (800107c <control_led7seg+0xcc>)
 8000fc6:	6013      	str	r3, [r2, #0]
		setTimer2(250);//0.25s
 8000fc8:	20fa      	movs	r0, #250	; 0xfa
 8000fca:	f000 fa9f 	bl	800150c <setTimer2>
		if(enable_seg == 0){
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <control_led7seg+0xcc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d12c      	bne.n	8001030 <control_led7seg+0x80>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fdc:	4828      	ldr	r0, [pc, #160]	; (8001080 <control_led7seg+0xd0>)
 8000fde:	f000 fec0 	bl	8001d62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4825      	ldr	r0, [pc, #148]	; (8001080 <control_led7seg+0xd0>)
 8000fea:	f000 feba 	bl	8001d62 <HAL_GPIO_WritePin>
			display7SEG1(time_road1 % 10);
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <control_led7seg+0xd4>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <control_led7seg+0xd8>)
 8000ff4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff8:	1099      	asrs	r1, r3, #2
 8000ffa:	17d3      	asrs	r3, r2, #31
 8000ffc:	1ac9      	subs	r1, r1, r3
 8000ffe:	460b      	mov	r3, r1
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	1ad1      	subs	r1, r2, r3
 8001008:	4608      	mov	r0, r1
 800100a:	f7ff fcb1 	bl	8000970 <display7SEG1>
			display7SEG2(time_road2 % 10);
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <control_led7seg+0xdc>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <control_led7seg+0xd8>)
 8001014:	fb83 1302 	smull	r1, r3, r3, r2
 8001018:	1099      	asrs	r1, r3, #2
 800101a:	17d3      	asrs	r3, r2, #31
 800101c:	1ac9      	subs	r1, r1, r3
 800101e:	460b      	mov	r3, r1
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	1ad1      	subs	r1, r2, r3
 8001028:	4608      	mov	r0, r1
 800102a:	f7ff fe31 	bl	8000c90 <display7SEG2>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
			display7SEG1(time_road1 / 10);
			display7SEG2(time_road2 / 10);
		}
	}
}
 800102e:	e021      	b.n	8001074 <control_led7seg+0xc4>
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <control_led7seg+0xd0>)
 8001038:	f000 fe93 	bl	8001d62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <control_led7seg+0xd0>)
 8001044:	f000 fe8d 	bl	8001d62 <HAL_GPIO_WritePin>
			display7SEG1(time_road1 / 10);
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <control_led7seg+0xd4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <control_led7seg+0xd8>)
 800104e:	fb82 1203 	smull	r1, r2, r2, r3
 8001052:	1092      	asrs	r2, r2, #2
 8001054:	17db      	asrs	r3, r3, #31
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fc89 	bl	8000970 <display7SEG1>
			display7SEG2(time_road2 / 10);
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <control_led7seg+0xdc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <control_led7seg+0xd8>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1092      	asrs	r2, r2, #2
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe0e 	bl	8000c90 <display7SEG2>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000c8 	.word	0x200000c8
 800107c:	200000ac 	.word	0x200000ac
 8001080:	40010800 	.word	0x40010800
 8001084:	200000b4 	.word	0x200000b4
 8001088:	66666667 	.word	0x66666667
 800108c:	200000b8 	.word	0x200000b8

08001090 <control_lightTraffic>:
#include "control_lightTraffic.h"

int state_lightTraffic = RED1_GREEN2;


void control_lightTraffic(){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

	switch(state_lightTraffic){
 8001094:	4b7d      	ldr	r3, [pc, #500]	; (800128c <control_lightTraffic+0x1fc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	2b03      	cmp	r3, #3
 800109c:	f200 80ea 	bhi.w	8001274 <control_lightTraffic+0x1e4>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <control_lightTraffic+0x18>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010b9 	.word	0x080010b9
 80010ac:	08001129 	.word	0x08001129
 80010b0:	08001199 	.word	0x08001199
 80010b4:	08001207 	.word	0x08001207
	case RED1_GREEN2:
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	4874      	ldr	r0, [pc, #464]	; (8001290 <control_lightTraffic+0x200>)
 80010c0:	f000 fe4f 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	4871      	ldr	r0, [pc, #452]	; (8001290 <control_lightTraffic+0x200>)
 80010cc:	f000 fe49 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	486e      	ldr	r0, [pc, #440]	; (8001290 <control_lightTraffic+0x200>)
 80010d8:	f000 fe43 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	486c      	ldr	r0, [pc, #432]	; (8001294 <control_lightTraffic+0x204>)
 80010e2:	f000 fe3e 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	4869      	ldr	r0, [pc, #420]	; (8001294 <control_lightTraffic+0x204>)
 80010ee:	f000 fe38 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f8:	4866      	ldr	r0, [pc, #408]	; (8001294 <control_lightTraffic+0x204>)
 80010fa:	f000 fe32 	bl	8001d62 <HAL_GPIO_WritePin>
		if(time_road2 <= 0){
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <control_lightTraffic+0x208>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f300 80b8 	bgt.w	8001278 <control_lightTraffic+0x1e8>
			state_lightTraffic = RED1_YELLOW2;
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <control_lightTraffic+0x1fc>)
 800110a:	2202      	movs	r2, #2
 800110c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 800110e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001112:	f000 f9e1 	bl	80014d8 <setTimer1>
			time_road1 = time_road1;
 8001116:	4b61      	ldr	r3, [pc, #388]	; (800129c <control_lightTraffic+0x20c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a60      	ldr	r2, [pc, #384]	; (800129c <control_lightTraffic+0x20c>)
 800111c:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 800111e:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <control_lightTraffic+0x210>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a5d      	ldr	r2, [pc, #372]	; (8001298 <control_lightTraffic+0x208>)
 8001124:	6013      	str	r3, [r2, #0]
		}
		break;
 8001126:	e0a7      	b.n	8001278 <control_lightTraffic+0x1e8>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112e:	4858      	ldr	r0, [pc, #352]	; (8001290 <control_lightTraffic+0x200>)
 8001130:	f000 fe17 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4855      	ldr	r0, [pc, #340]	; (8001290 <control_lightTraffic+0x200>)
 800113c:	f000 fe11 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001146:	4852      	ldr	r0, [pc, #328]	; (8001290 <control_lightTraffic+0x200>)
 8001148:	f000 fe0b 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	4850      	ldr	r0, [pc, #320]	; (8001294 <control_lightTraffic+0x204>)
 8001152:	f000 fe06 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	484d      	ldr	r0, [pc, #308]	; (8001294 <control_lightTraffic+0x204>)
 800115e:	f000 fe00 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	484a      	ldr	r0, [pc, #296]	; (8001294 <control_lightTraffic+0x204>)
 800116a:	f000 fdfa 	bl	8001d62 <HAL_GPIO_WritePin>
		if(time_road2 <= 0){
 800116e:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <control_lightTraffic+0x208>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f300 8082 	bgt.w	800127c <control_lightTraffic+0x1ec>
			state_lightTraffic = GREEN1_RED2;
 8001178:	4b44      	ldr	r3, [pc, #272]	; (800128c <control_lightTraffic+0x1fc>)
 800117a:	2203      	movs	r2, #3
 800117c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 800117e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001182:	f000 f9a9 	bl	80014d8 <setTimer1>
			time_road1 = time_green1;
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <control_lightTraffic+0x214>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a44      	ldr	r2, [pc, #272]	; (800129c <control_lightTraffic+0x20c>)
 800118c:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <control_lightTraffic+0x218>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a41      	ldr	r2, [pc, #260]	; (8001298 <control_lightTraffic+0x208>)
 8001194:	6013      	str	r3, [r2, #0]
		}
		break;
 8001196:	e071      	b.n	800127c <control_lightTraffic+0x1ec>
	case GREEN1_RED2:
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	483c      	ldr	r0, [pc, #240]	; (8001290 <control_lightTraffic+0x200>)
 80011a0:	f000 fddf 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011aa:	4839      	ldr	r0, [pc, #228]	; (8001290 <control_lightTraffic+0x200>)
 80011ac:	f000 fdd9 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	4836      	ldr	r0, [pc, #216]	; (8001290 <control_lightTraffic+0x200>)
 80011b8:	f000 fdd3 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	4834      	ldr	r0, [pc, #208]	; (8001294 <control_lightTraffic+0x204>)
 80011c2:	f000 fdce 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	4831      	ldr	r0, [pc, #196]	; (8001294 <control_lightTraffic+0x204>)
 80011ce:	f000 fdc8 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	482e      	ldr	r0, [pc, #184]	; (8001294 <control_lightTraffic+0x204>)
 80011da:	f000 fdc2 	bl	8001d62 <HAL_GPIO_WritePin>
		if(time_road1 <= 0){
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <control_lightTraffic+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dc4c      	bgt.n	8001280 <control_lightTraffic+0x1f0>
			state_lightTraffic = YELLOW1_RED2;
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <control_lightTraffic+0x1fc>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 80011ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f0:	f000 f972 	bl	80014d8 <setTimer1>
			time_road1 = time_yellow1;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <control_lightTraffic+0x21c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <control_lightTraffic+0x20c>)
 80011fa:	6013      	str	r3, [r2, #0]
			time_road2 = time_road2;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <control_lightTraffic+0x208>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a25      	ldr	r2, [pc, #148]	; (8001298 <control_lightTraffic+0x208>)
 8001202:	6013      	str	r3, [r2, #0]
		}
		break;
 8001204:	e03c      	b.n	8001280 <control_lightTraffic+0x1f0>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120c:	4820      	ldr	r0, [pc, #128]	; (8001290 <control_lightTraffic+0x200>)
 800120e:	f000 fda8 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <control_lightTraffic+0x200>)
 800121a:	f000 fda2 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	481a      	ldr	r0, [pc, #104]	; (8001290 <control_lightTraffic+0x200>)
 8001226:	f000 fd9c 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	4819      	ldr	r0, [pc, #100]	; (8001294 <control_lightTraffic+0x204>)
 8001230:	f000 fd97 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <control_lightTraffic+0x204>)
 800123c:	f000 fd91 	bl	8001d62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <control_lightTraffic+0x204>)
 8001248:	f000 fd8b 	bl	8001d62 <HAL_GPIO_WritePin>
		if(time_road1 <= 0){
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <control_lightTraffic+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dc17      	bgt.n	8001284 <control_lightTraffic+0x1f4>
			state_lightTraffic = RED1_GREEN2;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <control_lightTraffic+0x1fc>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
			setTimer1(1000);//1s
 800125a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125e:	f000 f93b 	bl	80014d8 <setTimer1>
			time_road1 = time_red1;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <control_lightTraffic+0x220>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <control_lightTraffic+0x20c>)
 8001268:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <control_lightTraffic+0x224>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <control_lightTraffic+0x208>)
 8001270:	6013      	str	r3, [r2, #0]
		}
		break;
 8001272:	e007      	b.n	8001284 <control_lightTraffic+0x1f4>
	default:
		break;
 8001274:	bf00      	nop
 8001276:	e006      	b.n	8001286 <control_lightTraffic+0x1f6>
		break;
 8001278:	bf00      	nop
 800127a:	e004      	b.n	8001286 <control_lightTraffic+0x1f6>
		break;
 800127c:	bf00      	nop
 800127e:	e002      	b.n	8001286 <control_lightTraffic+0x1f6>
		break;
 8001280:	bf00      	nop
 8001282:	e000      	b.n	8001286 <control_lightTraffic+0x1f6>
		break;
 8001284:	bf00      	nop
	}
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000003c 	.word	0x2000003c
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00
 8001298:	200000b8 	.word	0x200000b8
 800129c:	200000b4 	.word	0x200000b4
 80012a0:	20000050 	.word	0x20000050
 80012a4:	20000048 	.word	0x20000048
 80012a8:	2000004c 	.word	0x2000004c
 80012ac:	20000044 	.word	0x20000044
 80012b0:	20000040 	.word	0x20000040
 80012b4:	20000054 	.word	0x20000054

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012bc:	f000 fa50 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c0:	f000 f80c 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c4:	f000 f892 	bl	80013ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80012c8:	f000 f844 	bl	8001354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <main+0x20>)
 80012ce:	f001 f9a5 	bl	800261c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  control_all();
 80012d2:	f7ff fa2f 	bl	8000734 <control_all>
 80012d6:	e7fc      	b.n	80012d2 <main+0x1a>
 80012d8:	200000d4 	.word	0x200000d4

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b090      	sub	sp, #64	; 0x40
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	2228      	movs	r2, #40	; 0x28
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fd52 	bl	8002d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	2301      	movs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001306:	2310      	movs	r3, #16
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fd56 	bl	8001dc4 <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800131e:	f000 f8d5 	bl	80014cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f000 ffc2 	bl	80022c4 <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001346:	f000 f8c1 	bl	80014cc <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3740      	adds	r7, #64	; 0x40
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_TIM2_Init+0x94>)
 800137a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800137e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001388:	2209      	movs	r2, #9
 800138a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_TIM2_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <MX_TIM2_Init+0x94>)
 800139a:	f001 f8ef 	bl	800257c <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a4:	f000 f892 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_TIM2_Init+0x94>)
 80013b6:	f001 fa85 	bl	80028c4 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013c0:	f000 f884 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_TIM2_Init+0x94>)
 80013d2:	f001 fc51 	bl	8002c78 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013dc:	f000 f876 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000d4 	.word	0x200000d4

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 8001430:	2200      	movs	r2, #0
 8001432:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001436:	481d      	ldr	r0, [pc, #116]	; (80014ac <MX_GPIO_Init+0xc0>)
 8001438:	f000 fc93 	bl	8001d62 <HAL_GPIO_WritePin>
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|LED1_RED_Pin
                          |LED1_YELLOW_Pin|LED1_GREEN_Pin|ENM0_Pin|ENM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG2_A_Pin|SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin
 800143c:	2200      	movs	r2, #0
 800143e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001442:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001444:	f000 fc8d 	bl	8001d62 <HAL_GPIO_WritePin>
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG1_A_Pin SEG1_B_Pin SEG1_C_Pin SEG1_D_Pin
                           SEG1_E_Pin SEG1_F_Pin SEG1_G_Pin LED1_RED_Pin
                           LED1_YELLOW_Pin LED1_GREEN_Pin ENM0_Pin ENM1_Pin */
  GPIO_InitStruct.Pin = SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 8001448:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800144c:	60bb      	str	r3, [r7, #8]
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|LED1_RED_Pin
                          |LED1_YELLOW_Pin|LED1_GREEN_Pin|ENM0_Pin|ENM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2302      	movs	r3, #2
 8001458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4619      	mov	r1, r3
 8001460:	4812      	ldr	r0, [pc, #72]	; (80014ac <MX_GPIO_Init+0xc0>)
 8001462:	f000 faed 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_A_Pin SEG2_B_Pin SEG2_C_Pin SEG2_D_Pin
                           SEG2_E_Pin SEG2_F_Pin SEG2_G_Pin LED2_RED_Pin
                           LED2_YELLOW_Pin LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = SEG2_A_Pin|SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin
 8001466:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800146a:	60bb      	str	r3, [r7, #8]
                          |SEG2_E_Pin|SEG2_F_Pin|SEG2_G_Pin|LED2_RED_Pin
                          |LED2_YELLOW_Pin|LED2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2302      	movs	r3, #2
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4619      	mov	r1, r3
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_GPIO_Init+0xc4>)
 8001480:	f000 fade 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_TIME_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_TIME_Pin|BUTTON_SET_Pin;
 8001484:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_GPIO_Init+0xc0>)
 800149a:	f000 fad1 	bl	8001a40 <HAL_GPIO_Init>

}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	timerRun();
 80014bc:	f000 f85a 	bl	8001574 <timerRun>
	get_key_input_all();
 80014c0:	f7fe ff78 	bl	80003b4 <get_key_input_all>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/DURATION_DIVIDE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <setTimer1+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ea:	4a06      	ldr	r2, [pc, #24]	; (8001504 <setTimer1+0x2c>)
 80014ec:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <setTimer1+0x30>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000058 	.word	0x20000058
 8001504:	200000bc 	.word	0x200000bc
 8001508:	200000c0 	.word	0x200000c0

0800150c <setTimer2>:
void setTimer2(int duration){
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/DURATION_DIVIDE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <setTimer2+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb92 f3f3 	sdiv	r3, r2, r3
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <setTimer2+0x2c>)
 8001520:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <setTimer2+0x30>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000058 	.word	0x20000058
 8001538:	200000c4 	.word	0x200000c4
 800153c:	200000c8 	.word	0x200000c8

08001540 <setTimer3>:
void setTimer3(int duration){
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/DURATION_DIVIDE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <setTimer3+0x28>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001552:	4a06      	ldr	r2, [pc, #24]	; (800156c <setTimer3+0x2c>)
 8001554:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <setTimer3+0x30>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000058 	.word	0x20000058
 800156c:	200000cc 	.word	0x200000cc
 8001570:	200000d0 	.word	0x200000d0

08001574 <timerRun>:

void timerRun(){
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <timerRun+0x6c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd0b      	ble.n	8001598 <timerRun+0x24>
		timer1_counter--;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <timerRun+0x6c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <timerRun+0x6c>)
 8001588:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <timerRun+0x6c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dc02      	bgt.n	8001598 <timerRun+0x24>
			timer1_flag = 1;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <timerRun+0x70>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <timerRun+0x74>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd0b      	ble.n	80015b8 <timerRun+0x44>
		timer2_counter--;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <timerRun+0x74>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <timerRun+0x74>)
 80015a8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <timerRun+0x74>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	dc02      	bgt.n	80015b8 <timerRun+0x44>
			timer2_flag = 1;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <timerRun+0x78>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <timerRun+0x7c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dd0b      	ble.n	80015d8 <timerRun+0x64>
		timer3_counter--;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <timerRun+0x7c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <timerRun+0x7c>)
 80015c8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <timerRun+0x7c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	dc02      	bgt.n	80015d8 <timerRun+0x64>
			timer3_flag = 1;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <timerRun+0x80>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	200000bc 	.word	0x200000bc
 80015e4:	200000c0 	.word	0x200000c0
 80015e8:	200000c4 	.word	0x200000c4
 80015ec:	200000c8 	.word	0x200000c8
 80015f0:	200000cc 	.word	0x200000cc
 80015f4:	200000d0 	.word	0x200000d0

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_MspInit+0x5c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_MspInit+0x5c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_MspInit+0x5c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_MspInit+0x5c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_MspInit+0x5c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_MspInit+0x5c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_MspInit+0x60>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_MspInit+0x60>)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d113      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_TIM_Base_MspInit+0x44>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_TIM_Base_MspInit+0x44>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_TIM_Base_MspInit+0x44>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201c      	movs	r0, #28
 800168c:	f000 f9a1 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001690:	201c      	movs	r0, #28
 8001692:	f000 f9ba 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 f87f 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM2_IRQHandler+0x10>)
 80016fa:	f000 ffdb 	bl	80026b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000d4 	.word	0x200000d4

08001708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001714:	f7ff fff8 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800171a:	490c      	ldr	r1, [pc, #48]	; (800174c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800171c:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001730:	4c09      	ldr	r4, [pc, #36]	; (8001758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f001 fb05 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001742:	f7ff fdb9 	bl	80012b8 <main>
  bx lr
 8001746:	4770      	bx	lr
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001750:	08002de8 	.word	0x08002de8
  ldr r2, =_sbss
 8001754:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001758:	20000120 	.word	0x20000120

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x28>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x28>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f923 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	200f      	movs	r0, #15
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff ff3c 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f93b 	bl	8001a26 <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f903 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000005c 	.word	0x2000005c
 80017e4:	20000064 	.word	0x20000064
 80017e8:	20000060 	.word	0x20000060

080017ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_IncTick+0x1c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x20>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_IncTick+0x20>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000064 	.word	0x20000064
 800180c:	2000011c 	.word	0x2000011c

08001810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <HAL_GetTick+0x10>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	2000011c 	.word	0x2000011c

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4906      	ldr	r1, [pc, #24]	; (80018bc <__NVIC_EnableIRQ+0x34>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff90 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff2d 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff42 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff90 	bl	8001914 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5f 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff35 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e148      	b.n	8001ce6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a54:	2201      	movs	r2, #1
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8137 	bne.w	8001ce0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4aa3      	ldr	r2, [pc, #652]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d05e      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a7c:	4aa1      	ldr	r2, [pc, #644]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d875      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a82:	4aa1      	ldr	r2, [pc, #644]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d058      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a88:	4a9f      	ldr	r2, [pc, #636]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d86f      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a8e:	4a9f      	ldr	r2, [pc, #636]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d052      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a94:	4a9d      	ldr	r2, [pc, #628]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d869      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a9a:	4a9d      	ldr	r2, [pc, #628]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04c      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aa0:	4a9b      	ldr	r2, [pc, #620]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d863      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aa6:	4a9b      	ldr	r2, [pc, #620]	; (8001d14 <HAL_GPIO_Init+0x2d4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d046      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aac:	4a99      	ldr	r2, [pc, #612]	; (8001d14 <HAL_GPIO_Init+0x2d4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d85d      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d82a      	bhi.n	8001b0c <HAL_GPIO_Init+0xcc>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d859      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_GPIO_Init+0x80>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001b3b 	.word	0x08001b3b
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b27 	.word	0x08001b27
 8001acc:	08001b69 	.word	0x08001b69
 8001ad0:	08001b6f 	.word	0x08001b6f
 8001ad4:	08001b6f 	.word	0x08001b6f
 8001ad8:	08001b6f 	.word	0x08001b6f
 8001adc:	08001b6f 	.word	0x08001b6f
 8001ae0:	08001b6f 	.word	0x08001b6f
 8001ae4:	08001b6f 	.word	0x08001b6f
 8001ae8:	08001b6f 	.word	0x08001b6f
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001b6f 	.word	0x08001b6f
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b6f 	.word	0x08001b6f
 8001afc:	08001b6f 	.word	0x08001b6f
 8001b00:	08001b6f 	.word	0x08001b6f
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b31 	.word	0x08001b31
 8001b0c:	4a82      	ldr	r2, [pc, #520]	; (8001d18 <HAL_GPIO_Init+0x2d8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b12:	e02c      	b.n	8001b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e029      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	3304      	adds	r3, #4
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e024      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e01f      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	330c      	adds	r3, #12
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e01a      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e013      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]
          break;
 8001b5a:	e009      	b.n	8001b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	615a      	str	r2, [r3, #20]
          break;
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          break;
 8001b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	d801      	bhi.n	8001b7a <HAL_GPIO_Init+0x13a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_Init+0x13e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d802      	bhi.n	8001b8c <HAL_GPIO_Init+0x14c>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x152>
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	210f      	movs	r1, #15
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8090 	beq.w	8001ce0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_GPIO_Init+0x2dc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_GPIO_Init+0x2dc>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_GPIO_Init+0x2dc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd8:	4a51      	ldr	r2, [pc, #324]	; (8001d20 <HAL_GPIO_Init+0x2e0>)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2e4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00d      	beq.n	8001c20 <HAL_GPIO_Init+0x1e0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2e8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0x1dc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a47      	ldr	r2, [pc, #284]	; (8001d2c <HAL_GPIO_Init+0x2ec>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_GPIO_Init+0x1d8>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x1e2>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x1e2>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x1e2>
 8001c20:	2300      	movs	r3, #0
 8001c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c32:	493b      	ldr	r1, [pc, #236]	; (8001d20 <HAL_GPIO_Init+0x2e0>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c4c:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4937      	ldr	r1, [pc, #220]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c5a:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4933      	ldr	r1, [pc, #204]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	492d      	ldr	r1, [pc, #180]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4929      	ldr	r1, [pc, #164]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4923      	ldr	r1, [pc, #140]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	491f      	ldr	r1, [pc, #124]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4919      	ldr	r1, [pc, #100]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4915      	ldr	r1, [pc, #84]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f47f aeaf 	bne.w	8001a54 <HAL_GPIO_Init+0x14>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
 8001cfa:	372c      	adds	r7, #44	; 0x2c
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10220000 	.word	0x10220000
 8001d10:	10210000 	.word	0x10210000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10110000 	.word	0x10110000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	807b      	strh	r3, [r7, #2]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d72:	787b      	ldrb	r3, [r7, #1]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d7e:	e003      	b.n	8001d88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	041a      	lsls	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	611a      	str	r2, [r3, #16]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	041a      	lsls	r2, r3, #16
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	400b      	ands	r3, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e26c      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8087 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de4:	4b92      	ldr	r3, [pc, #584]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d00c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df0:	4b8f      	ldr	r3, [pc, #572]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d112      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
 8001dfc:	4b8c      	ldr	r3, [pc, #560]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d10b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0a:	4b89      	ldr	r3, [pc, #548]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d06c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x12c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d168      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e246      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x76>
 8001e2c:	4b80      	ldr	r3, [pc, #512]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a7f      	ldr	r2, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e02e      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b78      	ldr	r3, [pc, #480]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a77      	ldr	r2, [pc, #476]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e01d      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0xbc>
 8001e66:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a71      	ldr	r2, [pc, #452]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e80:	4b6b      	ldr	r3, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6a      	ldr	r2, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a67      	ldr	r2, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fcb6 	bl	8001810 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fcb2 	bl	8001810 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1fa      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe4>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fca2 	bl	8001810 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fc9e 	bl	8001810 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1e6      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x10c>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d063      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efe:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d11c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x18c>
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d116      	bne.n	8001f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x176>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e1ba      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4939      	ldr	r1, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	e03a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fc57 	bl	8001810 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff fc53 	bl	8001810 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e19b      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4927      	ldr	r1, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fc36 	bl	8001810 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fc32 	bl	8001810 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e17a      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d03a      	beq.n	8002048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d019      	beq.n	800200e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fc16 	bl	8001810 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fc12 	bl	8001810 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e15a      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002006:	2001      	movs	r0, #1
 8002008:	f000 fa9a 	bl	8002540 <RCC_Delay>
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_OscConfig+0x274>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff fbfc 	bl	8001810 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201a:	e00f      	b.n	800203c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fbf8 	bl	8001810 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d908      	bls.n	800203c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e140      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	42420000 	.word	0x42420000
 8002038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b9e      	ldr	r3, [pc, #632]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e9      	bne.n	800201c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a6 	beq.w	80021a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b97      	ldr	r3, [pc, #604]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b94      	ldr	r3, [pc, #592]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a93      	ldr	r2, [pc, #588]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8a      	ldr	r2, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7ff fbb9 	bl	8001810 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a2:	f7ff fbb5 	bl	8001810 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b64      	cmp	r3, #100	; 0x64
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0fd      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x312>
 80020c8:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	e02d      	b.n	8002132 <HAL_RCC_OscConfig+0x36e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x334>
 80020de:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a75      	ldr	r2, [pc, #468]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	e01c      	b.n	8002132 <HAL_RCC_OscConfig+0x36e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x356>
 8002100:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a6c      	ldr	r2, [pc, #432]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x36e>
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b64      	ldr	r3, [pc, #400]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7ff fb69 	bl	8001810 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7ff fb65 	bl	8001810 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0ab      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ee      	beq.n	8002142 <HAL_RCC_OscConfig+0x37e>
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7ff fb53 	bl	8001810 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff fb4f 	bl	8001810 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e095      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8081 	beq.w	80022ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d061      	beq.n	800227c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d146      	bne.n	800224e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_OscConfig+0x4fc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fb23 	bl	8001810 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff fb1f 	bl	8001810 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e067      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d108      	bne.n	8002208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	492d      	ldr	r1, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a19      	ldr	r1, [r3, #32]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	430b      	orrs	r3, r1
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x4fc>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff faf3 	bl	8001810 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff faef 	bl	8001810 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e037      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x46a>
 800224c:	e02f      	b.n	80022ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_RCC_OscConfig+0x4fc>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fadc 	bl	8001810 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff fad8 	bl	8001810 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e020      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x498>
 800227a:	e018      	b.n	80022ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e013      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42420060 	.word	0x42420060

080022c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0d0      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d910      	bls.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b67      	ldr	r3, [pc, #412]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4965      	ldr	r1, [pc, #404]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b8      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b59      	ldr	r3, [pc, #356]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800232a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	494d      	ldr	r1, [pc, #308]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d040      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d115      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07f      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e073      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06b      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4936      	ldr	r1, [pc, #216]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fa2c 	bl	8001810 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7ff fa28 	bl	8001810 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e053      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d210      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4922      	ldr	r1, [pc, #136]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4916      	ldr	r1, [pc, #88]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002452:	f000 f821 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002456:	4602      	mov	r2, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	490a      	ldr	r1, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1cc>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1d0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f98a 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	08002dbc 	.word	0x08002dbc
 8002490:	2000005c 	.word	0x2000005c
 8002494:	20000060 	.word	0x20000060

08002498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_GetSysClockFreq+0x94>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x30>
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x36>
 80024c6:	e027      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ca:	613b      	str	r3, [r7, #16]
      break;
 80024cc:	e027      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d8:	5cd3      	ldrb	r3, [r2, r3]
 80024da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_GetSysClockFreq+0x94>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0c5b      	lsrs	r3, r3, #17
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fa:	fb02 f203 	mul.w	r2, r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e004      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <HAL_RCC_GetSysClockFreq+0xa4>)
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	613b      	str	r3, [r7, #16]
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetSysClockFreq+0x98>)
 800251a:	613b      	str	r3, [r7, #16]
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	693b      	ldr	r3, [r7, #16]
}
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	007a1200 	.word	0x007a1200
 8002534:	08002dcc 	.word	0x08002dcc
 8002538:	08002ddc 	.word	0x08002ddc
 800253c:	003d0900 	.word	0x003d0900

08002540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <RCC_Delay+0x34>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <RCC_Delay+0x38>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0a5b      	lsrs	r3, r3, #9
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800255c:	bf00      	nop
  }
  while (Delay --);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e5a      	subs	r2, r3, #1
 8002562:	60fa      	str	r2, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f9      	bne.n	800255c <RCC_Delay+0x1c>
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	2000005c 	.word	0x2000005c
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e041      	b.n	8002612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff f85a 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 fa6e 	bl	8002a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e035      	b.n	80026a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_TIM_Base_Start_IT+0x90>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x4e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d004      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x4e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d111      	bne.n	800268e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b06      	cmp	r3, #6
 800267a:	d010      	beq.n	800269e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268c:	e007      	b.n	800269e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400

080026b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0202 	mvn.w	r2, #2
 80026e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f9b4 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f9a7 	bl	8002a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f9b6 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0204 	mvn.w	r2, #4
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f98a 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f97d 	bl	8002a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f98c 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0208 	mvn.w	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f960 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f953 	bl	8002a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f962 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0210 	mvn.w	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2208      	movs	r2, #8
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f936 	bl	8002a64 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f929 	bl	8002a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f938 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fe3e 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d107      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa6b 	bl	8002d3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d107      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8fc 	bl	8002a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0220 	mvn.w	r2, #32
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa36 	bl	8002d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_ConfigClockSource+0x1c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0b4      	b.n	8002a4a <HAL_TIM_ConfigClockSource+0x186>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002918:	d03e      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0xd4>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	f200 8087 	bhi.w	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	f000 8086 	beq.w	8002a36 <HAL_TIM_ConfigClockSource+0x172>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d87f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b70      	cmp	r3, #112	; 0x70
 8002932:	d01a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xa6>
 8002934:	2b70      	cmp	r3, #112	; 0x70
 8002936:	d87b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d050      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x11a>
 800293c:	2b60      	cmp	r3, #96	; 0x60
 800293e:	d877      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b50      	cmp	r3, #80	; 0x50
 8002942:	d03c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xfa>
 8002944:	2b50      	cmp	r3, #80	; 0x50
 8002946:	d873      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d058      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x13a>
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d86f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	d064      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	2b30      	cmp	r3, #48	; 0x30
 8002956:	d86b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d060      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d867      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05c      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b10      	cmp	r3, #16
 8002966:	d05a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002968:	e062      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 f95e 	bl	8002c3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800298c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	609a      	str	r2, [r3, #8]
      break;
 8002996:	e04f      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f000 f947 	bl	8002c3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ba:	609a      	str	r2, [r3, #8]
      break;
 80029bc:	e03c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8be 	bl	8002b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2150      	movs	r1, #80	; 0x50
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f915 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e02c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f8dc 	bl	8002ba8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2160      	movs	r1, #96	; 0x60
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f905 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e01c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 f89e 	bl	8002b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f8f5 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e00c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 f8ec 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002a2e:	e003      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      break;
 8002a34:	e000      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
	...

08002a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <TIM_Base_SetConfig+0xa8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <TIM_Base_SetConfig+0x28>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d003      	beq.n	8002ac4 <TIM_Base_SetConfig+0x28>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <TIM_Base_SetConfig+0xac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d108      	bne.n	8002ad6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <TIM_Base_SetConfig+0xa8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_Base_SetConfig+0x52>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d003      	beq.n	8002aee <TIM_Base_SetConfig+0x52>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <TIM_Base_SetConfig+0xac>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d108      	bne.n	8002b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <TIM_Base_SetConfig+0xa8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d103      	bne.n	8002b34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	615a      	str	r2, [r3, #20]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400

08002b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0201 	bic.w	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f023 030a 	bic.w	r3, r3, #10
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	031b      	lsls	r3, r3, #12
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f043 0307 	orr.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	021a      	lsls	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	609a      	str	r2, [r3, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e041      	b.n	8002d14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10c      	bne.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400

08002d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	2600      	movs	r6, #0
 8002d50:	4d0c      	ldr	r5, [pc, #48]	; (8002d84 <__libc_init_array+0x38>)
 8002d52:	4c0d      	ldr	r4, [pc, #52]	; (8002d88 <__libc_init_array+0x3c>)
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	f000 f822 	bl	8002da4 <_init>
 8002d60:	2600      	movs	r6, #0
 8002d62:	4d0a      	ldr	r5, [pc, #40]	; (8002d8c <__libc_init_array+0x40>)
 8002d64:	4c0a      	ldr	r4, [pc, #40]	; (8002d90 <__libc_init_array+0x44>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002de0 	.word	0x08002de0
 8002d88:	08002de0 	.word	0x08002de0
 8002d8c:	08002de0 	.word	0x08002de0
 8002d90:	08002de4 	.word	0x08002de4

08002d94 <memset>:
 8002d94:	4603      	mov	r3, r0
 8002d96:	4402      	add	r2, r0
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
